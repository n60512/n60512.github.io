<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sean talks</title>
  
  <subtitle>Attitude is everything</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-23T09:24:26.182Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Sean Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gcp-dataproc</title>
    <link href="http://example.com/2021/05/22/dataproc-note-001/"/>
    <id>http://example.com/2021/05/22/dataproc-note-001/</id>
    <published>2021-05-22T13:37:31.000Z</published>
    <updated>2021-05-23T09:24:26.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What’s-Dataproc"><a href="#What’s-Dataproc" class="headerlink" title="What’s Dataproc"></a>What’s Dataproc</h1><p>dataproc 是 google 推出的 Spark, hadoop 托管服務，<br>可以快速的佈建 cluster 環境，並降低管理困難與使用成本，<br>透過 dataproc 用戶可以專注在數據處理與分析上。 </p><h1 id="Create-dataproc-clusters"><a href="#Create-dataproc-clusters" class="headerlink" title="Create dataproc clusters"></a>Create dataproc clusters</h1><p>建立 clusters 的方式除了透過 GCP 網頁介面也可以透過 gcloud cmd 佈建</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcloud dataproc clusters create \</span><br><span class="line">    dataproc-demo  \</span><br><span class="line">    --region us-west1</span><br></pre></td></tr></table></figure><p>更詳細的指令使用可以參照 <a href="https://cloud.google.com/sdk/gcloud/reference/dataproc/clusters/create">dataproc creat</a></p><h2 id="SSH-into-cluster"><a href="#SSH-into-cluster" class="headerlink" title="SSH into cluster"></a>SSH into cluster</h2><p>如同 SSH 至 instance 的方法，可以以 <code>gcloud compute ssh</code><br>連線。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcloud compute ssh \</span><br><span class="line">    --zone &quot;us-west1&quot; \</span><br><span class="line">    &quot;dataproc-demo&quot; \</span><br><span class="line">    --project &quot;sean-demo-project&quot;</span><br></pre></td></tr></table></figure><h2 id="Web-UI"><a href="#Web-UI" class="headerlink" title="Web UI"></a>Web UI</h2><p>有時為方邊開發可以透過 <code>--enable-component-gateway</code> 啟用 web interface，<br>提供 jupyter lab/ MapReduce Job History /YARN Application Timeline 等等功能。<br><a href="https://cloud.google.com/dataproc/docs/concepts/accessing/dataproc-gateways?authuser=1&_ga=2.57344362.-1141058148.1619086341#gcloud-command">more</a></p><h2 id="Submit-a-job"><a href="#Submit-a-job" class="headerlink" title="Submit a job"></a>Submit a job</h2><p>以下是提交 pyspark job 的範例，<br>簡單的示範執行 gcs 中 dataproc-examples bucket 的 ./python/hello-world.py</p><p>首先 <code>cp</code> file <code>hello-world.py</code> to bucket</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gsutil cp ./hello-world.py gs://dataproc-examples/python/hello-world.py</span><br></pre></td></tr></table></figure><p>then, submit a pyspark job</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcloud dataproc <span class="built_in">jobs</span> submit pyspark \</span><br><span class="line">    --region us-west1 \</span><br><span class="line">    --cluster dataproc-demo  \</span><br><span class="line">    gs://dataproc-examples/python/hello-world.py \</span><br></pre></td></tr></table></figure><h1 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;What’s-Dataproc&quot;&gt;&lt;a href=&quot;#What’s-Dataproc&quot; class=&quot;headerlink&quot; title=&quot;What’s Dataproc&quot;&gt;&lt;/a&gt;What’s Dataproc&lt;/h1&gt;&lt;p&gt;dataproc 是 google </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>[Note] Kubernetes</title>
    <link href="http://example.com/2021/05/02/kubernetes-note-001/"/>
    <id>http://example.com/2021/05/02/kubernetes-note-001/</id>
    <published>2021-05-02T13:27:29.000Z</published>
    <updated>2021-05-18T07:07:33.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Note-Kubernetes"><a href="#Note-Kubernetes" class="headerlink" title="[Note] Kubernetes"></a>[Note] Kubernetes</h1><p>最近因工作需求必須稍微弄懂 kubernetes 在做些什麼，<br>因此筆記起來一些基礎的使用與常用語法和遇過的坑。<br>但要深究細節的話還是得參照官方 doc. : <a href="https://kubernetes.io/">https://kubernetes.io/</a> </p><h2 id="what’s-kubernetes"><a href="#what’s-kubernetes" class="headerlink" title="what’s kubernetes?"></a>what’s kubernetes?</h2><p>Kubernetes 提供自動化部署及管理 container 的服務，<br>以協助管理微服務（microservices）系統。</p><p>使用 kubernetes 可以提供以下功能：</p><ul><li>容器的部署（Deployment）至一或多台機器</li><li>工作負載自動化擴展（Scaling）</li><li>自動化偵測並重啟故障容器（Management），確保系統持續提供服務 </li></ul><h2 id="Component-of-Kubernetes"><a href="#Component-of-Kubernetes" class="headerlink" title="Component of Kubernetes"></a>Component of Kubernetes</h2><p>kubernetes 組成元件由小至大分別為 Pod, Worker Node, Master Node</p><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><p>Pod 為 kubernetes 運作的最小單位，一個 Pod 對應到一個 Application (e.g. API Server/data transform service)，而當多個 Containers 存在於同一個 Pod 時，這些 Containers 會共享資源及網路，以 yaml 定義並部署建立。</p><span id="more"></span><h3 id="Worker-Node"><a href="#Worker-Node" class="headerlink" title="Worker Node"></a>Worker Node</h3><p>Worker Node 是 kubernetes 中最小的硬體單位，一個 Worker Node 對應到的是一台機器，在 GCP 中即好比 Computer Engine，並由 kubelet、kube-proxy、Container Runtime 組成，主要負責運算資源的控制。</p><h3 id="Master-Node"><a href="#Master-Node" class="headerlink" title="Master Node"></a>Master Node</h3><p>Master Node 是 kubernetes 中的指揮所，提供包括 API Server、Etcd、叢集資源排程、應用部署管理等工作，負責管理其他 Node。</p><h3 id="Connect-to-Kubernetes-Kubectl"><a href="#Connect-to-Kubernetes-Kubectl" class="headerlink" title="Connect to Kubernetes - Kubectl"></a>Connect to Kubernetes - Kubectl</h3><p>Kubectl 是 kubernetes 的 Command Line 工具， kubectl 可以用來操作 Kubernetes 中的 Cluster，接下來就來說明一下如何建立 Pod、Service、Deployment、Ingerss，並透過 kubectl 建立。</p><h2 id="Pod-1"><a href="#Pod-1" class="headerlink" title="Pod"></a>Pod</h2><p>Pod 就如同前一章所說明的對應到每個 Application，而透過編寫下述 .yaml 檔案可以建立 helloPod 這個服務。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">   <span class="attr">name:</span> <span class="string">helloPod</span></span><br><span class="line">   <span class="attr">labels:</span></span><br><span class="line">     <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line"> <span class="attr">spec:</span></span><br><span class="line">   <span class="attr">containers:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">k8sContainer</span></span><br><span class="line">       <span class="attr">image:</span> <span class="string">helloPod/k8sDemo</span></span><br><span class="line">       <span class="attr">ports:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8787</span></span><br></pre></td></tr></table></figure><p>其中的各項文件分別代表:</p><ul><li>apiVersion: <ul><li>版號</li></ul></li><li>kind:<ul><li>屬性 (e.g. Pod, Node, Deployment, Service, Namespace)</li></ul></li><li>metadata:<ul><li>name:<ul><li>name of pod</li></ul></li><li>labels<ul><li>lable of pod</li></ul></li></ul></li><li>spec :: containers:<ul><li>name:<ul><li>name of container</li></ul></li><li>image:<ul><li>image of container from DockerHub</li></ul></li><li>ports:<ul><li>port of container that can be access</li></ul></li></ul></li></ul><h3 id="使用-kubectl-建立-Pod"><a href="#使用-kubectl-建立-Pod" class="headerlink" title="使用 kubectl 建立 Pod"></a>使用 kubectl 建立 Pod</h3><p>使用 apply 指令根據 .yaml 建立 Pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f helloPod.yaml</span><br></pre></td></tr></table></figure><p>接著可以使用 get 查看運行的 Pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><p>若要在本地端進行 access 可以透過 port-forward 進行服務連線</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl port-forward helloPod 8787:8787</span><br></pre></td></tr></table></figure><p>上述指令代表將 localhost 的 port 8787 mapping 至 helloPod 的 8787 por。</p><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>了解完 Pod 的建立後，接下來甚麼來講講甚麼是 Service。 由於 Pod 的生命週期是動態的，而為使系統在升級過程中達到無停機服務遷移，因此需要一個服務來讓每一次的存取可以正確連結到正在運行中的 Pod，這裡指的服務就是 Service。  </p><p>撰寫 Service 物件 .yaml file:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">helloService</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">     <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8787</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8787</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">demoApp</span></span><br></pre></td></tr></table></figure><h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><p>在討論完 Pod 與 Service 後可以來講講服務的縱向擴展元件 - Deployment，可以將 Deployment 看作將 Pod copy 多份在同一個 cluster 中提供服務，並監控這些 Pod 的運作以達到 <code>自動佈署</code> (重啟) 與 <code>多份備份</code> 的功能。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">helloDeployment</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">hello</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">minReadySeconds:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demoApp</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">hello</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">demoApp</span></span><br><span class="line">        <span class="attr">service:</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">xxx</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">k8sContainer</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">helloPod/k8sDemo</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">8787</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">VARIABLE1</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;test-001&quot;</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;128Mi&quot;</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;256m&quot;</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;512Mi&quot;</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;512m&quot;</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">xxx</span></span><br></pre></td></tr></table></figure><p>其中的各項元件分別代表(僅註未說明):</p><ul><li>spec<ul><li>replicas<ul><li>表示指定要建立多少個相同的 Pod ，若運行中的 Pod 低於這個數字，服務將會自動啟用 新的 Pod。</li></ul></li><li>strategy</li><li>template<ul><li>指定該 Deployment 所建立的 Pods 統一設定，包含 meatadata &amp; Containers，環境變數與 resources limit 等等。</li></ul></li></ul></li></ul><p>接著可以使用 get 查看運行的 Deployment &amp; Pod</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy</span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><h2 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h2><p>Continue …</p><h2 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h2><p>Continue …</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://kubernetes.io/">https://kubernetes.io/</a></li><li><a href="https://www.jeremyjordan.me/kubernetes/">https://www.jeremyjordan.me/kubernetes/</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10192401">https://ithelp.ithome.com.tw/articles/10192401</a></li><li><a href="https://cwhu.medium.com/kubernetes-implement-ingress-deployment-tutorial-7431c5f96c3e">https://cwhu.medium.com/kubernetes-implement-ingress-deployment-tutorial-7431c5f96c3e</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Note-Kubernetes&quot;&gt;&lt;a href=&quot;#Note-Kubernetes&quot; class=&quot;headerlink&quot; title=&quot;[Note] Kubernetes&quot;&gt;&lt;/a&gt;[Note] Kubernetes&lt;/h1&gt;&lt;p&gt;最近因工作需求必須稍微弄懂 kubernetes 在做些什麼，&lt;br&gt;因此筆記起來一些基礎的使用與常用語法和遇過的坑。&lt;br&gt;但要深究細節的話還是得參照官方 doc. : &lt;a href=&quot;https://kubernetes.io/&quot;&gt;https://kubernetes.io/&lt;/a&gt; &lt;/p&gt;
&lt;h2 id=&quot;what’s-kubernetes&quot;&gt;&lt;a href=&quot;#what’s-kubernetes&quot; class=&quot;headerlink&quot; title=&quot;what’s kubernetes?&quot;&gt;&lt;/a&gt;what’s kubernetes?&lt;/h2&gt;&lt;p&gt;Kubernetes 提供自動化部署及管理 container 的服務，&lt;br&gt;以協助管理微服務（microservices）系統。&lt;/p&gt;
&lt;p&gt;使用 kubernetes 可以提供以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器的部署（Deployment）至一或多台機器&lt;/li&gt;
&lt;li&gt;工作負載自動化擴展（Scaling）&lt;/li&gt;
&lt;li&gt;自動化偵測並重啟故障容器（Management），確保系統持續提供服務 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Component-of-Kubernetes&quot;&gt;&lt;a href=&quot;#Component-of-Kubernetes&quot; class=&quot;headerlink&quot; title=&quot;Component of Kubernetes&quot;&gt;&lt;/a&gt;Component of Kubernetes&lt;/h2&gt;&lt;p&gt;kubernetes 組成元件由小至大分別為 Pod, Worker Node, Master Node&lt;/p&gt;
&lt;h3 id=&quot;Pod&quot;&gt;&lt;a href=&quot;#Pod&quot; class=&quot;headerlink&quot; title=&quot;Pod&quot;&gt;&lt;/a&gt;Pod&lt;/h3&gt;&lt;p&gt;Pod 為 kubernetes 運作的最小單位，一個 Pod 對應到一個 Application (e.g. API Server/data transform service)，而當多個 Containers 存在於同一個 Pod 時，這些 Containers 會共享資源及網路，以 yaml 定義並部署建立。&lt;/p&gt;</summary>
    
    
    
    <category term="Cloud Computing" scheme="http://example.com/categories/Cloud-Computing/"/>
    
    <category term="GCP" scheme="http://example.com/categories/Cloud-Computing/GCP/"/>
    
    
  </entry>
  
  <entry>
    <title>Python 學習筆記 - 內建序列 (list &amp; tuple)</title>
    <link href="http://example.com/2021/01/28/%E9%AB%98%E6%95%88%E8%83%BDpython-002-list-tuple/"/>
    <id>http://example.com/2021/01/28/%E9%AB%98%E6%95%88%E8%83%BDpython-002-list-tuple/</id>
    <published>2021-01-27T16:00:00.000Z</published>
    <updated>2021-05-16T13:37:57.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#%E6%A6%82%E8%BF%B0" title="概述"></a>概述</h2><p><code>list</code> 和 <code>tuple</code> 都是 Python 中提供的陣列資料結構，當我們要建立陣列時，我們需先配置一塊記憶體區段 (其中的每一個區段都會被當成指向實際資料的整數指標)，其中 ：</p><ul><li>  <code>list</code> 為動態陣列型態</li><li>  <code>tuple</code> 則是靜態陣列 (內容固定不可變的)</li></ul><blockquote><p><code>list</code> 的可改變大小及修改特性意味著其比 <code>tuple</code> 需要存去更多的額外記憶體以計算。</p></blockquote><p>以 <code>list</code> 為例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]  </span><br></pre></td></tr></table></figure><p>在記憶體內的操作即是 :</p><ol><li> 配置 <code>list1</code> 所需要的記憶體空間</li><li> 產生一個空的 <code>list</code> 並存入這些指向元素的 pointer (如 <code>list1 = 0x003</code>)</li></ol><p><img src="https://i.imgur.com/cKjcl28.png"></p><blockquote><p>因此，當我們需要取出 list1 的第 4 個元素時，我們就會透過指標前往該序列，並取出第 4 個貯體位置內容。</p></blockquote><span id="more"></span><h2 id="串列-List"><a href="#串列-List" class="headerlink" title="串列 (List)"></a><a href="#%E4%B8%B2%E5%88%97-List" title="串列 (List)"></a>串列 (List)</h2><h3 id="串列的基本操作"><a href="#串列的基本操作" class="headerlink" title="串列的基本操作"></a><a href="#%E4%B8%B2%E5%88%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C" title="串列的基本操作"></a>串列的基本操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">year = <span class="number">2021</span>  </span><br><span class="line">company = <span class="string">&#x27;Apple&#x27;</span>  </span><br><span class="line">product = [<span class="string">&#x27;Apple Watch&#x27;</span>, <span class="string">&#x27;Iphone 12&#x27;</span>, <span class="string">&#x27;Ipad Pro&#x27;</span>, <span class="string">&#x27;Ipad Air&#x27;</span>, <span class="string">&#x27;iMac&#x27;</span>]  </span><br><span class="line">price = [<span class="number">8900</span>, <span class="number">26900</span>, <span class="number">30900</span>, <span class="number">18900</span>, <span class="number">35900</span>]  </span><br><span class="line">appear_on_the_market = <span class="literal">True</span>  </span><br><span class="line">  </span><br><span class="line">apple_inf = [year, company, product, price, appear_on_the_market]  </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apple_inf  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> </span><br><span class="line">[<span class="number">2021</span>,  </span><br><span class="line"> <span class="string">&#x27;Apple&#x27;</span>,  </span><br><span class="line"> [<span class="string">&#x27;Apple Watch&#x27;</span>, <span class="string">&#x27;Iphone 12&#x27;</span>, <span class="string">&#x27;Ipad Pro&#x27;</span>, <span class="string">&#x27;Ipad Air&#x27;</span>, <span class="string">&#x27;iMac&#x27;</span>],  </span><br><span class="line"> [<span class="number">8900</span>, <span class="number">26900</span>, <span class="number">30900</span>, <span class="number">18900</span>, <span class="number">35900</span>],  </span><br><span class="line"> <span class="literal">True</span>]  </span><br></pre></td></tr></table></figure><p><code>list.append</code>(<em>x</em>) : 將一個新的項目加到 list 的尾端。</p><p><code>list.extend</code>(<em>iterable</em>)將 iterable（可列舉物件）接到 list 的尾端。</p><p><code>list.insert</code>(<em>i</em>, <em>x</em>)將一個項目插入至 list 中給定的位置。第一個引數為插入處前元素的索引值，舉例來說：</p><ul><li>  <code>a.insert(0, x)</code> 會插入為 list 首位</li><li>  <code>a.insert(len(a), x)</code> 插入為末位</li></ul><p><code>list.remove</code>(<em>x</em>)移除列表中第一个值为 <em>x</em> 的元素。</p><p><code>list.pop</code>([<em>i</em>])移除 list 中給定位置的項目，並回傳它。如果沒有指定位置， <code>a.pop()</code> 將會移除 list 中最後的項目並回傳它。</p><p><code>list.clear</code>()刪除 list 中所有項目。這等同於 <code>del a[:]</code> 。</p><p><code>list.index</code>(<em>x</em>[, <em>start</em>[, <em>end</em>]]) 回傳 list 中第一個值等於 <em>x</em> 的項目之索引值（從零開始的索引往後計算）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">_<span class="built_in">iter</span> =  <span class="number">100000</span>  </span><br><span class="line">start = time.time()  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(_<span class="built_in">iter</span>):  </span><br><span class="line"> apple_inf[<span class="number">2</span>].index(<span class="string">&#x27;Ipad Air&#x27;</span>, <span class="number">0</span>)  </span><br><span class="line">  </span><br><span class="line">t1 = time.time() - start  </span><br><span class="line">start = time.time()  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(_<span class="built_in">iter</span>):  </span><br><span class="line"> apple_inf[<span class="number">2</span>].index(<span class="string">&#x27;Ipad Air&#x27;</span>, <span class="number">2</span>)  </span><br><span class="line">  </span><br><span class="line">t2 = time.time() - start  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Execution time: &#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;t1: &#x27;</span>, <span class="built_in">str</span>(t1))  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;t2: &#x27;</span>, <span class="built_in">str</span>(t2))  </span><br><span class="line">  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> </span><br><span class="line">Execution time:   </span><br><span class="line">t1:  <span class="number">0.021004676818847656</span>  </span><br><span class="line">t2:  <span class="number">0.018004655838012695</span>  </span><br></pre></td></tr></table></figure><blockquote><p>index 於以設定從索引處開始向後搜尋，因此可以看到 t2 的搜尋速度快於 t1</p></blockquote><p><code>list.count</code>(<em>x</em>)回傳數值為 <em>x</em> 在 list 中所出現的次數。</p><p><code>list.sort</code>(***, <em>key=None</em>, <em>reverse=False</em>)將 list 中的項目排序。</p><p><code>list.reverse</code>()將 list 中的項目前後順序反過來。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apple_inf[<span class="number">2</span>].reverse()  </span><br><span class="line"><span class="built_in">print</span>(apple_inf[<span class="number">2</span>], apple_inf[<span class="number">2</span>][::-<span class="number">1</span>])  </span><br><span class="line">  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> </span><br><span class="line">([<span class="string">&#x27;iMac&#x27;</span>, <span class="string">&#x27;Ipad Air&#x27;</span>, <span class="string">&#x27;Ipad Pro&#x27;</span>, <span class="string">&#x27;Iphone 12&#x27;</span>, <span class="string">&#x27;Apple Watch&#x27;</span>],  </span><br><span class="line"> [<span class="string">&#x27;Apple Watch&#x27;</span>, <span class="string">&#x27;Iphone 12&#x27;</span>, <span class="string">&#x27;Ipad Pro&#x27;</span>, <span class="string">&#x27;Ipad Air&#x27;</span>, <span class="string">&#x27;iMac&#x27;</span>])  </span><br></pre></td></tr></table></figure><blockquote><p>step 參數指定為 -1 時 可以將 list 的資料順序顛倒。</p></blockquote><p>list.copy()回傳一個淺複製 (shallow copy) 的 list 。等同於 a[:]。</p><h3 id="List-Comprehensions"><a href="#List-Comprehensions" class="headerlink" title="List Comprehensions"></a><a href="#List-Comprehensions" title="List Comprehensions"></a>List Comprehensions</h3><p>listcomp 可以用簡潔的方法創建 list，提高程式易讀性，可用在 iterable 物件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="string">&quot;aeqwFWD&quot;</span>  </span><br><span class="line">count = []  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> num:  </span><br><span class="line"> count.append(<span class="built_in">ord</span>(i))  </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="string">&quot;aeqwFWD&quot;</span>  </span><br><span class="line">count = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> num]  </span><br></pre></td></tr></table></figure><blockquote><p>listcomp 將目的表示更為明確，容易理解。<br>程式超過兩行，使用一般 for 迴圈或許較好。</p></blockquote><h3 id="list-的-超額配置"><a href="#list-的-超額配置" class="headerlink" title="list 的 超額配置"></a><a href="#list-%E7%9A%84-%E8%B6%85%E9%A1%8D%E9%85%8D%E7%BD%AE" title="list 的 超額配置"></a><code>list</code> 的 <strong>超額配置</strong></h3><blockquote><p>當你對大小為 N 的串列附加 1 個資料時， python 會建立 N + M 個 額外空間應付未來的附加，接著將舊串列的資料複製到新串列中，再將舊串列銷毀。 (圖 3-3 p.74)</p></blockquote><h2 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a><a href="#Tuple" title="Tuple"></a>Tuple</h2><p>雖然 tuple 和 list 看起來很類似，但是他們通常用在不同的情況與不同目的。</p><p>tuple 是 immutable （不可變的），通常儲存異質的序列元素，並可經由拆解(unpacking) （請參考本節後段）或索引 (indexing) 來存取（或者在使用 namedtuples 的時候藉由屬性 (attribute) 來存取）。 list 是 mutable （可變的），其元素通常是同質的且可藉由迭代整個串列來存取。</p><h3 id="用-Tuple-紀錄"><a href="#用-Tuple-紀錄" class="headerlink" title="用 Tuple 紀錄"></a><a href="#%E7%94%A8-Tuple-%E7%B4%80%E9%8C%84" title="用 Tuple 紀錄"></a>用 Tuple 紀錄</h3><h3 id="序列封裝-tuple-packing"><a href="#序列封裝-tuple-packing" class="headerlink" title="序列封裝 (tuple packing)"></a><a href="#%E5%BA%8F%E5%88%97%E5%B0%81%E8%A3%9D-tuple-packing" title="序列封裝 (tuple packing)"></a>序列封裝 (tuple packing)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">metro_area = [  </span><br><span class="line"> (<span class="string">&#x27;Tokyo&#x27;</span>, <span class="number">2020</span>, <span class="number">42340</span>, <span class="number">35.677700</span>, <span class="number">139.818298</span>),  </span><br><span class="line"> (<span class="string">&#x27;Taipei&#x27;</span>, <span class="number">2020</span>, <span class="number">32340</span>, <span class="number">25.038792</span>, <span class="number">121.521580</span>)  </span><br><span class="line">]  </span><br><span class="line">metro_area   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> </span><br><span class="line">(<span class="string">&#x27;Tokyo&#x27;</span>, <span class="number">2020</span>, <span class="number">42340</span>, <span class="number">35.6777</span>, <span class="number">139.818298</span>)  </span><br></pre></td></tr></table></figure><h3 id="序列拆解-sequence-unpacking"><a href="#序列拆解-sequence-unpacking" class="headerlink" title="序列拆解 (sequence unpacking)"></a><a href="#%E5%BA%8F%E5%88%97%E6%8B%86%E8%A7%A3-sequence-unpacking" title="序列拆解 (sequence unpacking)"></a>序列拆解 (sequence unpacking)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">city, year, pop, lat, lon = metro_area[<span class="number">0</span>]  </span><br><span class="line">year, pop, lat, lon  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> </span><br><span class="line">(<span class="number">2020</span>, <span class="number">42340</span>, <span class="number">35.6777</span>, <span class="number">139.818298</span>)  </span><br></pre></td></tr></table></figure><h2 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a><a href="#namedtuple" title="namedtuple"></a>namedtuple</h2><p>collection.namedtuple 可以用來製造 tuple 子類別，並加入欄位名稱與類別名稱 (協助除錯)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple  </span><br><span class="line">  </span><br><span class="line">City = namedtuple(<span class="string">&#x27;City&#x27;</span>, [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;year&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;lat&#x27;</span>, <span class="string">&#x27;lon&#x27;</span>])  </span><br><span class="line"><span class="comment"># 提供跌代字串方法，相等於 City = namedtuple(&#x27;City&#x27;, &#x27;name year pop lat lon&#x27;)  </span></span><br><span class="line">  </span><br><span class="line">tokyo = City(<span class="string">&#x27;Tokyo&#x27;</span>, <span class="number">2020</span>, <span class="number">42340</span>, <span class="number">35.677700</span>, <span class="number">139.818298</span>)  </span><br><span class="line">taipei = City(<span class="string">&#x27;Taipei&#x27;</span>, <span class="number">2020</span>, <span class="number">32340</span>, <span class="number">25.038792</span>, <span class="number">121.521580</span>)  </span><br><span class="line">  </span><br><span class="line">tokyo, taipei  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> </span><br><span class="line">(City(name=<span class="string">&#x27;Tokyo&#x27;</span>, year=<span class="number">2020</span>, pop=<span class="number">42340</span>, lat=<span class="number">35.6777</span>, lon=<span class="number">139.818298</span>),  </span><br><span class="line"> City(name=<span class="string">&#x27;Taipei&#x27;</span>, year=<span class="number">2020</span>, pop=<span class="number">32340</span>, lat=<span class="number">25.038792</span>, lon=<span class="number">121.52158</span>))  </span><br></pre></td></tr></table></figure><blockquote><p>使用 namedtuple 所用到的記憶體空間與 tuple 完全一樣，使用的記憶體比一般物件少，因為不會儲存到 <strong>dict</strong> 中的屬性。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">metro_area[<span class="number">0</span>].__sizeof__(), tokyo.__sizeof__()  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> </span><br><span class="line">(<span class="number">64</span>, <span class="number">64</span>)  </span><br></pre></td></tr></table></figure><p>namedtuple 除了繼承 tuple 屬性以外，最常使用的還包括 _fields 類別屬性, _make(iterable) 類別方法, _asdict() 實例方法</p><p><strong>_fields</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">City._fields  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> </span><br><span class="line">(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;year&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;lat&#x27;</span>, <span class="string">&#x27;lon&#x27;</span>)  </span><br></pre></td></tr></table></figure><p><strong>_make(iterable)</strong></p><p>實例化一個 namedtuple</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">taichung = [<span class="string">&#x27;Taichung&#x27;</span>, <span class="number">2020</span> ,<span class="number">23041</span> , <span class="number">24.161453</span>, <span class="number">120.688604</span>]  </span><br><span class="line">City._make(taichung)  <span class="comment"># 相等於 City(*taichung)  </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  </span><br><span class="line">City(name=<span class="string">&#x27;Taichung&#x27;</span>, year=<span class="number">2020</span>, pop=<span class="number">23041</span>, lat=<span class="number">24.161453</span>, lon=<span class="number">120.688604</span>)  </span><br></pre></td></tr></table></figure><p><strong>_asdict()</strong></p><p>回傳 collections.OrderedDict 不是 dict (3.1 到3.7)</p><p>回傳 dict (3.8)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tokyo._asdict(), <span class="built_in">type</span>(tokyo._asdict())  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> </span><br><span class="line">(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tokyo&#x27;</span>,  </span><br><span class="line"> <span class="string">&#x27;year&#x27;</span>: <span class="number">2020</span>,  </span><br><span class="line"> <span class="string">&#x27;pop&#x27;</span>: <span class="number">42340</span>,  </span><br><span class="line"> <span class="string">&#x27;lat&#x27;</span>: <span class="number">35.6777</span>,  </span><br><span class="line"> <span class="string">&#x27;lon&#x27;</span>: <span class="number">139.818298</span>&#125;,  </span><br><span class="line"> <span class="built_in">dict</span>)  </span><br></pre></td></tr></table></figure><h3 id="將-Tuple-當成不可變的串列"><a href="#將-Tuple-當成不可變的串列" class="headerlink" title="將 Tuple 當成不可變的串列"></a><a href="#%E5%B0%87-Tuple-%E7%95%B6%E6%88%90%E4%B8%8D%E5%8F%AF%E8%AE%8A%E7%9A%84%E4%B8%B2%E5%88%97" title="將 Tuple 當成不可變的串列"></a><strong>將 Tuple 當成不可變的串列</strong></h3><p>tuple 支援所有不涉及<strong>添加</strong>或<strong>移除</strong>的串列方法。</p><h2 id="List-與-Tuple-比較"><a href="#List-與-Tuple-比較" class="headerlink" title="List 與 Tuple 比較"></a><a href="#List-%E8%88%87-Tuple-%E6%AF%94%E8%BC%83" title="List 與 Tuple 比較"></a>List 與 Tuple 比較</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">taichung = [<span class="string">&#x27;Taichung&#x27;</span>, <span class="number">2020</span> ,<span class="number">23041</span> , <span class="number">24.161453</span>, <span class="number">120.688604</span>]  </span><br><span class="line">taichung, City(*taichung)  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>  </span><br><span class="line">([<span class="string">&#x27;Taichung&#x27;</span>, <span class="number">2020</span>, <span class="number">23041</span>, <span class="number">24.161453</span>, <span class="number">120.688604</span>],  </span><br><span class="line"> City(name=<span class="string">&#x27;Taichung&#x27;</span>, year=<span class="number">2020</span>, pop=<span class="number">23041</span>, lat=<span class="number">24.161453</span>, lon=<span class="number">120.688604</span>),  </span><br><span class="line"> <span class="number">80</span>,  </span><br><span class="line"> <span class="number">64</span>)  </span><br></pre></td></tr></table></figure><p>以上可以看出，在存取相同元素時， List 的存取大小要比 Tuple 來得大。這是因為 List 為動態存取，需要存取指標來指向對應的元素位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">kaohsiung = <span class="built_in">list</span>()  </span><br><span class="line"><span class="built_in">print</span>(kaohsiung.__sizeof__())  </span><br><span class="line">  </span><br><span class="line">kaohsiung.append(<span class="string">&#x27;Kaohsiung&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(kaohsiung.__sizeof__())  </span><br><span class="line">  </span><br><span class="line">kaohsiung.append(<span class="number">2020</span>)  </span><br><span class="line"><span class="built_in">print</span>(kaohsiung.__sizeof__())  </span><br><span class="line">  </span><br><span class="line">kaohsiung.append(<span class="number">19240</span>)  </span><br><span class="line"><span class="built_in">print</span>(kaohsiung.__sizeof__())  </span><br><span class="line">  </span><br><span class="line">kaohsiung.append(<span class="number">22.623562</span>)  </span><br><span class="line"><span class="built_in">print</span>(kaohsiung.__sizeof__())  </span><br><span class="line">  </span><br><span class="line">kaohsiung.append(<span class="number">120.303034</span>)  </span><br><span class="line"><span class="built_in">print</span>(kaohsiung.__sizeof__())  </span><br><span class="line">  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> </span><br><span class="line"><span class="number">40</span>  </span><br><span class="line"><span class="number">72</span>  </span><br><span class="line"><span class="number">72</span>  </span><br><span class="line"><span class="number">72</span>  </span><br><span class="line"><span class="number">72</span>  </span><br><span class="line"><span class="number">104</span>  </span><br></pre></td></tr></table></figure><p>因為 List 為可變的，一般來說會保留額外的存儲空間，當佔用空間不足時，再額外分配新空間使用。</p><p><strong>接著測試 List 與 Tuple 的效能</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit  </span><br><span class="line">  </span><br><span class="line">timeit.timeit(<span class="string">&quot;kaohsiung = [&#x27;Kaohsiung&#x27;, 2020, 19240, 22.623562, 120.303034]&quot;</span>), \  </span><br><span class="line">timeit.timeit(<span class="string">&quot;kaohsiung = (&#x27;Kaohsiung&#x27;, 2020, 19240, 22.623562, 120.303034)&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> </span><br><span class="line">(<span class="number">0.0898362999996607</span>, <span class="number">0.017529799999465467</span>)  </span><br></pre></td></tr></table></figure><hr><blockquote><p>泛用的程式碼比專門設計來解決特定問題的程式碼要慢得多，因此之後會再詳細說明 .array 與 numpy 方法之比較。</p></blockquote><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>  <a href="https://link.medium.com/USl7RTgbHcb">https://link.medium.com/USl7RTgbHcb</a></li><li>  <a href="https://docs.python.org/zh-tw/3/tutorial/datastructures.html">https://docs.python.org/zh-tw/3/tutorial/datastructures.html</a></li><li>  <a href="https://docs.python.org/zh-tw/3/library/collections.html#collections.namedtuple">https://docs.python.org/zh-tw/3/library/collections.html#collections.namedtuple</a></li><li>  <a href="https://www.books.com.tw/products/0010706172">流暢的 Pyhon</a></li><li>  <a href="https://www.books.com.tw/products/0010686196">高效能 Python 程式設計</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#%E6%A6%82%E8%BF%B0&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;code&gt;list&lt;/code&gt; 和 &lt;code&gt;tuple&lt;/code&gt; 都是 Python 中提供的陣列資料結構，當我們要建立陣列時，我們需先配置一塊記憶體區段 (其中的每一個區段都會被當成指向實際資料的整數指標)，其中 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;list&lt;/code&gt; 為動態陣列型態&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;tuple&lt;/code&gt; 則是靜態陣列 (內容固定不可變的)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; 的可改變大小及修改特性意味著其比 &lt;code&gt;tuple&lt;/code&gt; 需要存去更多的額外記憶體以計算。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以 &lt;code&gt;list&lt;/code&gt; 為例：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;list1 = [&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;]  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在記憶體內的操作即是 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 配置 &lt;code&gt;list1&lt;/code&gt; 所需要的記憶體空間&lt;/li&gt;
&lt;li&gt; 產生一個空的 &lt;code&gt;list&lt;/code&gt; 並存入這些指向元素的 pointer (如 &lt;code&gt;list1 = 0x003&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cKjcl28.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因此，當我們需要取出 list1 的第 4 個元素時，我們就會透過指標前往該序列，並取出第 4 個貯體位置內容。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    <category term="Note" scheme="http://example.com/categories/Python/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>Python 學習筆記 - 效能分析</title>
    <link href="http://example.com/2021/01/14/%E9%AB%98%E6%95%88%E8%83%BDpython-001/"/>
    <id>http://example.com/2021/01/14/%E9%AB%98%E6%95%88%E8%83%BDpython-001/</id>
    <published>2021-01-14T13:02:31.000Z</published>
    <updated>2021-05-16T13:37:54.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="載入-Julia-Set"><a href="#載入-Julia-Set" class="headerlink" title="載入 Julia Set"></a><a href="#%E8%BC%89%E5%85%A5-Julia-Set" title="載入 Julia Set"></a>載入 Julia Set</h2><p>書中使用 <strong>julia set</strong> 來進行程式執行時間的分析。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/b/b1/Julia_set_%28ice%29.png" alt="Julia set"></p><h2 id="print-amp-Decorator"><a href="#print-amp-Decorator" class="headerlink" title="print &amp; Decorator"></a><a href="#print-amp-Decorator" title="print &amp; Decorator"></a>print &amp; Decorator</h2><p><code>calculate_z_serial_purepython</code> 為需要被計時的函式</p><p>直覺的分析方式可以用 <code>print</code> 函式，計算 func. 執行前後的時間間隔</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 擴展 julia pseudo code  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_z_serial_purepython</span>(<span class="params">maxiter, zs, cs</span>):</span>  </span><br><span class="line"> output = [<span class="number">0</span>] * <span class="built_in">len</span>(zs)  </span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(zs)):  </span><br><span class="line"> n = <span class="number">0</span>  </span><br><span class="line"> z = zs[i]  </span><br><span class="line"> c = cs[i]  </span><br><span class="line"> <span class="keyword">while</span> <span class="built_in">abs</span>(z) &lt; <span class="number">2</span> <span class="keyword">and</span> n &lt; maxiter:  </span><br><span class="line"> z = z * z + c  </span><br><span class="line"> n += <span class="number">1</span>  </span><br><span class="line"> output[i] = n  </span><br><span class="line"> <span class="keyword">return</span> output  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 建構座標串列，作為函式輸入  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_pure_python</span>(<span class="params">desired_width, max_iterations</span>):</span>  </span><br><span class="line">   </span><br><span class="line"> ... ...  </span><br><span class="line">  </span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;Length of x:&quot;</span>, <span class="built_in">len</span>(x))  </span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;Total elements:&quot;</span>, <span class="built_in">len</span>(zs))  </span><br><span class="line"> start_time = time.time()  </span><br><span class="line"> output = calculate_z_serial_purepython(max_iterations, zs, cs)  </span><br><span class="line"> end_time = time.time()  </span><br><span class="line"> secs = end_time - start_time  </span><br><span class="line"> <span class="built_in">print</span>(calculate_z_serial_purepython.__name__ + <span class="string">&quot; took&quot;</span>, secs, <span class="string">&quot; seconds&quot;</span>)  </span><br><span class="line"> <span class="keyword">pass</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line"> calc_pure_python(desired_width=<span class="number">10000</span>, max_iterations=<span class="number">300</span>)  </span><br></pre></td></tr></table></figure><p>此外我們也可以透過定義裝飾器 (Decorator) ，自動化計時</p><p>可以看出執行時間比 <code>calc_pure_python</code> 稍微快一點點，差在於 <strong>呼叫函式</strong> 的開銷。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefn</span>(<span class="params">fn</span>):</span>  </span><br><span class="line"><span class="meta"> @wraps(<span class="params">fn</span>)  </span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">measure_time</span>(<span class="params">*args, **kwargs</span>):</span>  </span><br><span class="line"> t1 = time.time()  </span><br><span class="line"> result = fn(*args, **kwargs)  </span><br><span class="line"> t2 = time.time()  </span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;@timefn:&quot;</span> + fn.__name__ + <span class="string">&quot; took &quot;</span> + <span class="built_in">str</span>(t2 - t1) + <span class="string">&quot; seconds&quot;</span>)  </span><br><span class="line"> <span class="keyword">return</span> result  </span><br><span class="line"> <span class="keyword">return</span> measure_time  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@timefn  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_z_serial_purepython</span>(<span class="params">maxiter, zs, cs</span>):</span>  </span><br><span class="line"> ... ...  </span><br><span class="line"> <span class="keyword">pass</span>  </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span> </span><br><span class="line">Length of x: <span class="number">10001</span>  </span><br><span class="line">Total elements: <span class="number">22232223</span>  </span><br><span class="line"><span class="meta">@timefn:</span></span><br><span class="line">calculate_z_serial_purepython took <span class="number">12.860910654067993</span> seconds  </span><br><span class="line">calculate_z_serial_purepython took <span class="number">12.861911058425903</span>  seconds  </span><br></pre></td></tr></table></figure><h2 id="使用-timeit-模組"><a href="#使用-timeit-模組" class="headerlink" title="使用 timeit 模組"></a><a href="#%E4%BD%BF%E7%94%A8-timeit-%E6%A8%A1%E7%B5%84" title="使用 timeit 模組"></a>使用 timeit 模組</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m timeit -n <span class="number">2</span> -r <span class="number">3</span> -s <span class="string">&quot;import julia_set&quot;</span> \  </span><br><span class="line"> <span class="string">&quot;julia_set.calc_pure_python(desired_width=10000, max_iterations=300)&quot;</span>  </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span> </span><br><span class="line">Length of x: <span class="number">10001</span>  </span><br><span class="line">Total elements: <span class="number">22232223</span>  </span><br><span class="line"><span class="meta">@timefn:</span></span><br><span class="line">calculate_z_serial_purepython took <span class="number">13.562626361846924</span> seconds  </span><br><span class="line">calculate_z_serial_purepython took <span class="number">13.562626361846924</span>  seconds  </span><br><span class="line">Length of x: <span class="number">10001</span>  </span><br><span class="line"> ... ...  </span><br><span class="line"> ... ...  </span><br><span class="line"><span class="number">2</span> loops, best of <span class="number">3</span>: <span class="number">24.3</span> sec per loop  </span><br></pre></td></tr></table></figure><h2 id="使用-Unix-time-計時"><a href="#使用-Unix-time-計時" class="headerlink" title="使用 Unix time 計時"></a><a href="#%E4%BD%BF%E7%94%A8-Unix-time-%E8%A8%88%E6%99%82" title="使用 Unix time 計時"></a>使用 Unix time 計時</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/time --verbose python julia_set.py  </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Length of x: <span class="number">10001</span>  </span><br><span class="line">Total elements: <span class="number">22232223</span>  </span><br><span class="line"><span class="meta">@timefn:</span></span><br><span class="line">calculate_z_serial_purepython took <span class="number">13.609860897064209</span> seconds  </span><br><span class="line">calculate_z_serial_purepython took <span class="number">13.609860897064209</span>  seconds  </span><br><span class="line"> Command being timed: <span class="string">&quot;python julia_set.py&quot;</span>  </span><br><span class="line"> User time (seconds): <span class="number">12.53</span>  </span><br><span class="line"> System time (seconds): <span class="number">0.50</span>  </span><br><span class="line"> Percent of CPU this job got: <span class="number">99</span>%  </span><br><span class="line"> Elapsed (wall clock) time (h:mm:ss <span class="keyword">or</span> m:ss): <span class="number">0</span>:<span class="number">13.03</span>  </span><br><span class="line"> Average shared text size (kbytes): <span class="number">0</span>  </span><br><span class="line"> Average unshared data size (kbytes): <span class="number">0</span>  </span><br><span class="line"> Average stack size (kbytes): <span class="number">0</span>  </span><br><span class="line"> Average total size (kbytes): <span class="number">0</span>  </span><br><span class="line"> Maximum resident <span class="built_in">set</span> size (kbytes): <span class="number">2649264</span>  </span><br><span class="line"> Average resident <span class="built_in">set</span> size (kbytes): <span class="number">0</span>  </span><br><span class="line"> Major (requiring I/O) page faults: <span class="number">0</span>  </span><br><span class="line"> Minor (reclaiming a frame) page faults: <span class="number">516303</span>  </span><br><span class="line"> Voluntary context switches: <span class="number">1</span>  </span><br><span class="line"> Involuntary context switches: <span class="number">23</span>  </span><br><span class="line"> Swaps: <span class="number">0</span>  </span><br><span class="line"> File system inputs: <span class="number">0</span>  </span><br><span class="line"> File system outputs: <span class="number">0</span>  </span><br><span class="line"> Socket messages sent: <span class="number">0</span>  </span><br><span class="line"> Socket messages received: <span class="number">0</span>  </span><br><span class="line"> Signals delivered: <span class="number">0</span>  </span><br><span class="line"> Page size (<span class="built_in">bytes</span>): <span class="number">4096</span>  </span><br><span class="line"> Exit status: <span class="number">0</span>  </span><br></pre></td></tr></table></figure><p><strong>注意</strong>:</p><ul><li>  Major (requiring I/O) page faults 可顯示出哪些程式由於資料從 RAM 搬移至 DISK，進行磁碟存取而導致運作速度降低。</li></ul><h2 id="使用-cPython-模組"><a href="#使用-cPython-模組" class="headerlink" title="使用 cPython 模組"></a><a href="#%E4%BD%BF%E7%94%A8-cPython-%E6%A8%A1%E7%B5%84" title="使用 cPython 模組"></a>使用 cPython 模組</h2><p>cPython 是標準程式庫的內建分析工具，他可以連接至 CPython 內的虛擬機器查看每個函式的執行時間。 他會耗費更大的執行開銷，但式可以獲取更多資訊。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m cProfile -s cumulative julia_set.py  </span><br></pre></td></tr></table></figure><h3 id="參數解釋"><a href="#參數解釋" class="headerlink" title="參數解釋"></a>參數解釋</h3><table><thead><tr><th>Para.</th><th>Description</th></tr></thead><tbody><tr><td>ncalls</td><td>調用次數</td></tr><tr><td>tottime</td><td>在指定函数中消耗的總時間 (不含調用子含式時間)</td></tr><tr><td>percall</td><td>是 tottime 除以 ncalls 的商</td></tr><tr><td>cumtime</td><td>指定的函数及其所有子函数消耗的累計時間</td></tr><tr><td>percall</td><td>是 cumtime 除以原始調用 (次数) 的商 (含數運行一次的平均時間)</td></tr><tr><td>filename</td><td>提供相應數據的每個函式</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span> </span><br><span class="line">Length of x: <span class="number">10001</span>  </span><br><span class="line">Total elements: <span class="number">22232223</span>  </span><br><span class="line"><span class="meta">@timefn:calculate_z_serial_purepython took <span class="number">17.469009399414062</span> seconds  </span></span><br><span class="line"> <span class="number">85723442</span> function calls <span class="keyword">in</span> <span class="number">33.889</span> seconds  </span><br><span class="line">  </span><br><span class="line"> Ordered by: cumulative time  </span><br><span class="line">  </span><br><span class="line"> ncalls  tottime  percall  cumtime  percall filename:lineno(function)  </span><br><span class="line"> <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>   <span class="number">33.889</span>   <span class="number">33.889</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="built_in">exec</span>&#125;  </span><br><span class="line"> <span class="number">1</span>    <span class="number">0.550</span>    <span class="number">0.550</span>   <span class="number">33.889</span>   <span class="number">33.889</span> julia_set.py:<span class="number">1</span>(&lt;module&gt;)  </span><br><span class="line"> <span class="number">1</span>   <span class="number">12.257</span>   <span class="number">12.257</span>   <span class="number">33.339</span>   <span class="number">33.339</span> julia_set.py:<span class="number">7</span>(calc_pure_python)  </span><br><span class="line"> <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>   <span class="number">17.470</span>   <span class="number">17.470</span> julia_set.py:<span class="number">42</span>(measure_time)  </span><br><span class="line"> <span class="number">1</span>   <span class="number">13.078</span>   <span class="number">13.078</span>   <span class="number">17.470</span>   <span class="number">17.470</span> julia_set.py:<span class="number">52</span>(calculate_z_serial_purepython)  </span><br><span class="line"> <span class="number">41246738</span>    <span class="number">4.392</span>    <span class="number">0.000</span>    <span class="number">4.392</span>    <span class="number">0.000</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="built_in">abs</span>&#125;  </span><br><span class="line"> <span class="number">44476670</span>    <span class="number">3.611</span>    <span class="number">0.000</span>    <span class="number">3.611</span>    <span class="number">0.000</span> &#123;method <span class="string">&#x27;append&#x27;</span> of <span class="string">&#x27;list&#x27;</span> objects&#125;  </span><br><span class="line"> <span class="number">4</span>    <span class="number">0.001</span>    <span class="number">0.000</span>    <span class="number">0.001</span>    <span class="number">0.000</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="built_in">print</span>&#125;  </span><br><span class="line"> <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> julia_set.py:<span class="number">41</span>(timefn)  </span><br><span class="line"> <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> functools.py:<span class="number">34</span>(update_wrapper)  </span><br><span class="line"> <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> functools.py:<span class="number">64</span>(wraps)  </span><br><span class="line"> <span class="number">4</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="built_in">len</span>&#125;  </span><br><span class="line"> <span class="number">4</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> &#123;built-<span class="keyword">in</span> method time.time&#125;  </span><br><span class="line"> <span class="number">7</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="built_in">getattr</span>&#125;  </span><br><span class="line"> <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> &#123;method <span class="string">&#x27;disable&#x27;</span> of <span class="string">&#x27;_lsprof.Profiler&#x27;</span> objects&#125;  </span><br><span class="line"> <span class="number">5</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="built_in">setattr</span>&#125;  </span><br><span class="line"> <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> &#123;method <span class="string">&#x27;update&#x27;</span> of <span class="string">&#x27;dict&#x27;</span> objects&#125;  </span><br></pre></td></tr></table></figure><h3 id="透過-pstats-模組格式化表格查看。"><a href="#透過-pstats-模組格式化表格查看。" class="headerlink" title="透過 pstats 模組格式化表格查看。"></a><a href="#%E9%80%8F%E9%81%8E-pstats-%E6%A8%A1%E7%B5%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%A1%A8%E6%A0%BC%E6%9F%A5%E7%9C%8B%E3%80%82" title="透過 pstats 模組格式化表格查看。"></a>透過 pstats 模組格式化表格查看。</h3><p>為了進一步控制 cProfile 結果，可以儲存成一個統計檔案 <code>profile.stats</code>，並以 python 分析它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m cProfile -o profile.stats julia_set.py  </span><br></pre></td></tr></table></figure><p>使用 pstats 載入分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pstats  </span><br><span class="line">p = pstats.Stats(<span class="string">&quot;profile.stats&quot;</span>)  </span><br><span class="line">p.sort_stats(<span class="string">&quot;cumulative&quot;</span>)  </span><br><span class="line">p.print_stats()  </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span> </span><br><span class="line">Wed Jan <span class="number">13</span> <span class="number">16</span>:<span class="number">38</span>:<span class="number">37</span> <span class="number">2021</span>    profile.stats  </span><br><span class="line">  </span><br><span class="line"> <span class="number">85723442</span> function calls <span class="keyword">in</span> <span class="number">33.296</span> seconds  </span><br><span class="line">  </span><br><span class="line"> Ordered by: cumulative time  </span><br><span class="line">  </span><br><span class="line"> ncalls  tottime  percall  cumtime  percall filename:lineno(function)  </span><br><span class="line"> <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>   <span class="number">33.296</span>   <span class="number">33.296</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="built_in">exec</span>&#125;  </span><br><span class="line"> <span class="number">1</span>    <span class="number">0.534</span>    <span class="number">0.534</span>   <span class="number">33.296</span>   <span class="number">33.296</span> julia_set.py:<span class="number">1</span>(&lt;module&gt;)  </span><br><span class="line"> <span class="number">1</span>   <span class="number">11.865</span>   <span class="number">11.865</span>   <span class="number">32.762</span>   <span class="number">32.762</span> julia_set.py:<span class="number">7</span>(calc_pure_python)  </span><br><span class="line"> <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>   <span class="number">17.240</span>   <span class="number">17.240</span> julia_set.py:<span class="number">42</span>(measure_time)  </span><br><span class="line"> <span class="number">1</span>   <span class="number">12.872</span>   <span class="number">12.872</span>   <span class="number">17.240</span>   <span class="number">17.240</span> julia_set.py:<span class="number">52</span>(calculate_z_serial_purepython)  </span><br><span class="line"> <span class="number">41246738</span>    <span class="number">4.368</span>    <span class="number">0.000</span>    <span class="number">4.368</span>    <span class="number">0.000</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="built_in">abs</span>&#125;  </span><br><span class="line"> <span class="number">44476670</span>    <span class="number">3.656</span>    <span class="number">0.000</span>    <span class="number">3.656</span>    <span class="number">0.000</span> &#123;method <span class="string">&#x27;append&#x27;</span> of <span class="string">&#x27;list&#x27;</span> objects&#125;  </span><br><span class="line"> <span class="number">4</span>    <span class="number">0.001</span>    <span class="number">0.000</span>    <span class="number">0.001</span>    <span class="number">0.000</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="built_in">print</span>&#125;  </span><br><span class="line"> <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> julia_set.py:<span class="number">41</span>(timefn)  </span><br><span class="line"> <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> C:\ProgramData\Anaconda3\lib\functools.py:<span class="number">34</span>(update_wrapper)  </span><br><span class="line"> <span class="number">4</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="built_in">len</span>&#125;  </span><br><span class="line"> <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> C:\ProgramData\Anaconda3\lib\functools.py:<span class="number">64</span>(wraps)  </span><br><span class="line"> <span class="number">4</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> &#123;built-<span class="keyword">in</span> method time.time&#125;  </span><br><span class="line"> <span class="number">7</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="built_in">getattr</span>&#125;  </span><br><span class="line"> <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> &#123;method <span class="string">&#x27;disable&#x27;</span> of <span class="string">&#x27;_lsprof.Profiler&#x27;</span> objects&#125;  </span><br><span class="line"> <span class="number">5</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> &#123;built-<span class="keyword">in</span> method builtins.<span class="built_in">setattr</span>&#125;  </span><br><span class="line"> <span class="number">1</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span>    <span class="number">0.000</span> &#123;method <span class="string">&#x27;update&#x27;</span> of <span class="string">&#x27;dict&#x27;</span> objects&#125;  </span><br></pre></td></tr></table></figure><h2 id="使用-SnakeViz-將-cProfile-的輸出視覺化"><a href="#使用-SnakeViz-將-cProfile-的輸出視覺化" class="headerlink" title="使用 SnakeViz 將 cProfile 的輸出視覺化"></a><a href="#%E4%BD%BF%E7%94%A8-SnakeViz-%E5%B0%87-cProfile-%E7%9A%84%E8%BC%B8%E5%87%BA%E8%A6%96%E8%A6%BA%E5%8C%96" title="使用 SnakeViz 將 cProfile 的輸出視覺化"></a>使用 SnakeViz 將 cProfile 的輸出視覺化</h2><p>執行 <code>snakeviz profile.stats</code> 可以將 CPU 耗費資源以圖表方式視覺化呈現，寬度表示執行所耗費時間。<br>下方表格則是歸納出函式的耗費時間，為了與人溝通解釋，圖表可以快速讓聽者了解你的觀點。</p><p><img src="https://i.imgur.com/h9hVOCJ.png" alt="snakeviz"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><a href="#Reference" title="Reference"></a>Reference</h2><ul><li>  <a href="https://zh.wikipedia.org/wiki/%E6%9C%B1%E5%88%A9%E4%BA%9A%E9%9B%86%E5%90%88">https://zh.wikipedia.org/wiki/朱利亚集合</a></li><li>  <a href="https://docs.python.org/zh-tw/3/library/profile.html">https://docs.python.org/zh-tw/3/library/profile.html</a></li><li>  <a href="https://www.books.com.tw/products/0010686196">高效能 Python 程式設計</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;載入-Julia-Set&quot;&gt;&lt;a href=&quot;#載入-Julia-Set&quot; class=&quot;headerlink&quot; title=&quot;載入 Julia Set&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#%E8%BC%89%E5%85%A5-Julia-Set&quot; title=&quot;載入 </summary>
      
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    <category term="Note" scheme="http://example.com/categories/Python/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>NLP - 複習筆記 (BoW, Word2Vec, FastText)</title>
    <link href="http://example.com/2021/01/03/nlp-review-001/"/>
    <id>http://example.com/2021/01/03/nlp-review-001/</id>
    <published>2021-01-02T16:00:00.000Z</published>
    <updated>2021-05-16T13:00:19.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Bag-of-Words"><a href="#Bag-of-Words" class="headerlink" title="Bag of Words"></a><a href="#Bag-of-Words" title="Bag of Words"></a>Bag of Words</h2><p>詞袋 Bag of words 的作法：</p><ul><li>  將獲得的句子以 one-hot 向量表示，向量長則為全部詞彙的總數</li><li>  詞袋無法保存文字順序、詞彙間意義的關係</li></ul><p><img src="https://i.imgur.com/1o3T12k.png" alt="bag_of_word"></p><span id="more"></span><h2 id="Word2Vec"><a href="#Word2Vec" class="headerlink" title="Word2Vec"></a><a href="#Word2Vec" title="Word2Vec"></a>Word2Vec</h2><p>Word2Vec 模型主要由 CBOW 或 Skip-gram 兩種模型建立而成。</p><ul><li>CBOW (Continuous Bag of Word)<ul><li>  給定上下文詞彙 (斷詞後) 向量，預測輸入的詞彙向量，目的是要使當前字詞出現的機率越高越好</li></ul></li><li>Skip-gram<ul><li>  與 CBOW 相反。給定輸入詞彙向量，預測上下文詞彙向量</li></ul></li></ul><p><img src="https://i.imgur.com/BfkeEWm.png" alt="word2vec"></p><h3 id="Word2Vec-詞向量特性"><a href="#Word2Vec-詞向量特性" class="headerlink" title="Word2Vec 詞向量特性"></a><a href="#Word2Vec-%E8%A9%9E%E5%90%91%E9%87%8F%E7%89%B9%E6%80%A7" title="Word2Vec 詞向量特性"></a><strong>Word2Vec 詞向量特性</strong></h3><ul><li>因此較常出現在相鄰位置的詞彙之向量具有較高的相似程度<ul><li>  使用 Cosine Similarity 計算</li></ul></li><li>  國王-王后 向量 會相似於 男孩-女孩 向量</li><li>  較無法表示一詞多義的意思</li></ul><h3 id="Skip-gram-for-example"><a href="#Skip-gram-for-example" class="headerlink" title="Skip-gram for example"></a><a href="#Skip-gram-for-example" title="Skip-gram for example"></a>Skip-gram for example</h3><p>如下圖每個詞彙向量的計算是：</p><ol><li> 將文字透過 one-hot 轉換成編碼作為輸入</li><li> Ont-hot 向量乘 $W_{input}$ (Embedding Matrix ) 得到 $N$ 維的 hidden layer 向量</li><li> 接著再與視窗中設置的相鄰詞彙，矩陣相乘得到每個字 ($V$維) 皆有一個值，最後以 Softmax function 輸出一個介於 0~1 的值表現其出現的機率</li></ol><p><img src="https://i.imgur.com/e0cepeZ.png" alt="skip-gram"></p><h3 id="提高模型訓練的技巧"><a href="#提高模型訓練的技巧" class="headerlink" title="提高模型訓練的技巧"></a><a href="#%E6%8F%90%E9%AB%98%E6%A8%A1%E5%9E%8B%E8%A8%93%E7%B7%B4%E7%9A%84%E6%8A%80%E5%B7%A7" title="提高模型訓練的技巧"></a>提高模型訓練的技巧</h3><ol><li> 將常見的單詞組合，作為一組詞彙處理 (e.g. ‘烏’+’龜’ → ‘烏龜’)，透過設計一個好的斷詞(segmentation)、斷字(tokenization)模組</li><li> 對高出現頻率的字詞抽樣減少訓練樣本數</li><li> Negative Sampling</li></ol><h2 id="fastText"><a href="#fastText" class="headerlink" title="fastText"></a><a href="#fastText" title="fastText"></a>fastText</h2><p>fastText 是 Facebook’s AI Research (FAIR) 實驗室提供的文字分類、詞向量訓練工具，並提供以巨量文本資料預訓練好的詞向量模型。</p><p>相對於 Word2Vec ，fastText 考慮 subwords 特性訓練詞向量矩陣，比如英文單詞 ”company”，可以拆分為長度大於等於3 的 n-gram :[‘com’,’omp’,’mpa’,’pan’,’any’,’comp’,’ompa’,’mpan’,’pany’,’compa’,’ompan’,’mpany’,’compan’,’ompany’, ‘company’]。</p><p>將上述 n-gram 向量 sum up 作為 ”company” 的詞向量。這樣的訓練方式特別在英文上起了很大的作用，因為英文中有許多字首、字尾相同的單詞。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://stackoverflow.com/questions/45384185/what-is-the-difference-between-linearsvc-and-svckernel-linear/45390526">SVC vs linearSVC</a></p></li><li><p><a href="https://aegis4048.github.io/demystifying_neural_network_in_skip_gram_language_modeling">https://aegis4048.github.io/demystifying_neural_network_in_skip_gram_language_modeling</a></p></li><li><p><a href="https://arxiv.org/abs/1310.4546">Distributed Representations of Words and Phrases and their Compositionality</a>  </p></li><li><p><a href="https://arxiv.org/abs/1411.2738">word2vec Parameter Learning Explained</a></p></li><li><p><a href="/tags/Natural-Language-Processing/"># Natural Language Processing</a></p></li><li><p><a href="/2020/11/28/DRN/" title="DRN : A Deep Reinforcement Learning Framework for News Recommendation">DRN : A Deep Reinforcement Learning Framework for News Recommendation</a></p></li><li><p><a href="/2021/01/14/%E9%AB%98%E6%95%88%E8%83%BDpython-1/" title="Python 學習筆記 - 效能分析">Python 學習筆記 - 效能分析</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Bag-of-Words&quot;&gt;&lt;a href=&quot;#Bag-of-Words&quot; class=&quot;headerlink&quot; title=&quot;Bag of Words&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#Bag-of-Words&quot; title=&quot;Bag of Words&quot;&gt;&lt;/a&gt;Bag of Words&lt;/h2&gt;&lt;p&gt;詞袋 Bag of words 的作法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  將獲得的句子以 one-hot 向量表示，向量長則為全部詞彙的總數&lt;/li&gt;
&lt;li&gt;  詞袋無法保存文字順序、詞彙間意義的關係&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/1o3T12k.png&quot; alt=&quot;bag_of_word&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Natural Language Processing" scheme="http://example.com/categories/Natural-Language-Processing/"/>
    
    <category term="Note" scheme="http://example.com/categories/Natural-Language-Processing/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>DRN : A Deep Reinforcement Learning Framework for News Recommendation</title>
    <link href="http://example.com/2020/11/28/DRN/"/>
    <id>http://example.com/2020/11/28/DRN/</id>
    <published>2020-11-27T16:00:00.000Z</published>
    <updated>2021-05-16T12:54:31.688Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a><a href="#Introduction" title="Introduction"></a>Introduction</h3><p>現今新聞推薦系統中，許多的研究透過加入類神經網路 (Neural) 加強了模型的預測效能，但在變動快速的新聞生態以及用戶偏好容易隨時間改變的特性下，要作出優秀的預測仍是一大挑戰。</p><p>總的來說本作將問題視為三個部分:</p><ol><li> 過往的研究往往嘗試以提升 <strong>current reward</strong> 的預測為目標，卻忽略可能對未來推薦造成的影響。</li><li> 大部分的推薦系統通常僅考慮用戶 <strong>點擊</strong> 或其他 user feedback 作為模型建模的依據 (label) ，但本作認為應對 User 之於系統的 <strong>滿意程度</strong> 多做著墨</li><li> 當今推薦系統常有<strong>重複推薦相似新聞內容</strong>給用戶的問題，舉例來說：在某一時間中的重大新聞被系統大量重複推薦給用戶</li></ol><p>因此本作基於上述 3 個議題提出基於 Deep Reinforcement Learning 的模型框架 (DRN) 以對應問題：</p><ol><li> 提出 <strong>Deep Q learning</strong> 以同時考慮 current &amp; future reward 建模</li><li> DRN 除了可考慮 user feedback 外，更進一步去估算 <strong>user activeness</strong> 造成的影響</li><li> 使用 <strong>Dueling Bandit Gradient Descent</strong> Algo. 作搜索 (Exploration) 以避免推薦重覆相似的新聞，且避免推薦 Unrelated 的新聞</li></ol><span id="more"></span><h3 id="Problem-Define"><a href="#Problem-Define" class="headerlink" title="Problem Define"></a><a href="#Problem-Define" title="Problem Define"></a>Problem Define</h3><p><strong>input</strong></p><ul><li>  user $u$</li><li>  time $t$</li><li>  list of candidate news $l$</li></ul><p><strong>output</strong></p><ul><li>  list of top-k recommended news $L$</li></ul><h3 id="Model-Framwork"><a href="#Model-Framwork" class="headerlink" title="Model Framwork"></a><a href="#Model-Framwork" title="Model Framwork"></a>Model Framwork</h3><p>關於模型框架可以分為線下網路(offline)與線上網路(online)。</p><ul><li>線下網路：透過蒐集的用戶-新聞點擊紀錄進行訓練，以監督式學習進行 $Q$ Net 的學習。</li><li>線上網路則分為下列四個環節更新模型:<ol><li><strong>PUSH:</strong> 在每一個 timestamp $t$ 下，當用戶 $u$ 發送請求時，系統 agent $G$ 將根據輸入的 $u, l$ 與 state 產生推薦結果 $L$ 推薦給用戶。</li><li><strong>FEEDBACK:</strong> 用戶對推薦內容 $L$ 的反饋。</li><li><strong>MINNOR UPDATE: (DBGD)</strong> 每個 timestamp 後，模型根據用戶訊息(state)、推薦之新聞(action) 與用戶反饋(reward) 進行模型更新，並評估比較 exploitation network $Q$ 和 exploration network $\hat{Q}$ 的表现，若 $\hat{Q}$ 表現優於 $Q$ 時，另當前 $Q$ 網路參數向 $\hat{Q}$ 參數調整方向更新，反之更新參數不變。</li><li><strong>MAJOR UPDATE: (DQN)</strong> 在一定的時間 $T_R$ 過後，agent $G$ 透過儲存在 Memory 中的歷史資訊(feedback $B$, user activeness) 對 $Q$ 進行參數更新。本作透過間隔一個小時來進行更新，在期間蒐集多次反饋紀錄。</li></ol></li></ul><p><img src="https://i.imgur.com/AkdVnjV.png" alt="model framework"></p><h3 id="Deep-Reinforcement-Learning-for-recommendation"><a href="#Deep-Reinforcement-Learning-for-recommendation" class="headerlink" title="Deep Reinforcement Learning for recommendation"></a><a href="#Deep-Reinforcement-Learning-for-recommendation" title="Deep Reinforcement Learning for recommendation"></a>Deep Reinforcement Learning for recommendation</h3><p>本作是採用 Dueling-Double-DQN 的方法進行深度強化學習。<br>將 user feature, context feature 作為當前的 state ，並以 news feature, user-news interaction feature 作為 action，透過 Q 網路模型輸出當前狀態 state 採取這個 action 的 Q 值。</p><p>估量 Q 值的方式則是透過同時考慮當前狀態的 reward 與未來的 reward。</p><p>$y_{s,a} = Q(s,a) = r_{imm.} + \gamma r_{future}$</p><p>$r_{imm.}$ 將考慮用戶點擊反饋與用戶活動度反饋； $\gamma r_{future}$ 則採取 <a href="https://arxiv.org/pdf/1509.06461.pdf">Double-DQN</a> 方法進行預測:</p><p>$y_{s,a,t} = r_{a,t+1} + \gamma Q(s_{a,t+1}, \underset{a’}{\mathrm{argmax}} Q(s_{a,t+1}, a’; W_t); W_t’)$</p><p>其中：</p><ul><li>  $r_{a,t+1}$ 透過 memory 紀錄，表示執行 action $a$ 時的用戶反饋</li><li>  $\underset{a’}{\mathrm{argmax}} Q(s_{a,t+1}, a’; W_t)$ 則為當初執行 $a$ 時的 state ，嘗試在 $s_a$ 時找到最佳 action $a$，以獲取最佳未來反饋</li><li>  每一次的迭代後將 $W_t, W_t’$ 進行互換</li></ul><p>$Q$ 函數計算的方式則是透過 <a href="http://proceedings.mlr.press/v48/wangf16.pdf">Dueling Network</a><br>分解成 $V(s)$和 $A(s,a)$ 如圖:</p><p><img src="https://i.imgur.com/mxeg2ci.png" alt="q net"></p><h3 id="User-Activeness"><a href="#User-Activeness" class="headerlink" title="User Activeness"></a><a href="#User-Activeness" title="User Activeness"></a>User Activeness</h3><p>User Activeness 則是本作提出的用戶反饋指標，為估量用戶再次使用系統的可能性，或視為使用系統的頻率，並認為好的推薦結果可增加用戶使用的意願。<br>透過文中 (3)~(6) 式可以計算出時間 t 時用戶返回系統的機率，並計算出一定時間內的活躍程度如圖。</p><p>最後可將 total reward 定義為:<br>$r_{total} = r_{click} + \beta r_{active}$</p><p><img src="https://i.imgur.com/7zHKRqn.png" alt="user active"></p><h3 id="Exploration"><a href="#Exploration" class="headerlink" title="Exploration"></a><a href="#Exploration" title="Exploration"></a>Exploration</h3><p><img src="https://i.imgur.com/soNeBHt.png" alt="exploration"></p><p>強化學習中常見的探索方式如 $ϵ−greedy$ 會隨機推薦新的新聞給用戶，將導致可能推薦未相關 (unrelated) 的商品而導致推薦的效果下降。</p><p>作者則採用 Dueling Bandit Gradient Descent Algo. 進行探索 (exploration)，agent $G$ 透過當前網路 $Q$ 產生出推薦 $L$，並同時以探索網路 $\hat{Q}$ 產生另外的推薦預測 $\hat{L}$。並以 $L$ &amp; $\hat{L}$ 進行 probabilistic interleave 產生新列表 $\bar{L}$，若 $\hat{Q}$ 表現優於 $Q$ 時，另當前 $Q$ 網路參數向 $\hat{Q}$ 參數調整方向更新如:</p><p>$w’ = w + η \hat{w}$</p><p>反之更新參數不變。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><a href="#Reference" title="Reference:"></a>Reference</h3><ul><li><a href="https://arxiv.org/pdf/1509.06461.pdf">Double-DQN</a>  </li><li><a href="http://proceedings.mlr.press/v48/wangf16.pdf">Dueling Network</a>  </li><li><a href="http://www.personal.psu.edu/~gjz5038/paper/www2018_reinforceRec/www2018_reinforceRec.pdf">DRN : A Deep Reinforcement Learning Framework for News Recommendation</a></li><li><a href="/tags/Reinforcement-Learning/"># Reinforcement Learning</a> <a href="/tags/Recommender-System/"># Recommender System</a></li><li><a href="/2020/11/08/The-Most-Important-Thing-Illuminated/" title="[心得] 投資最重要的事 | The Most Important Thing Illuminated (Howerd Marks)">[心得] 投資最重要的事 | The Most Important Thing Illuminated (Howerd Marks)</a></li><li><a href="/2021/01/03/NLP_note_1/" title="NLP - 複習筆記 (BoW, Word2Vec, FastText)">NLP - 複習筆記 (BoW, Word2Vec, FastText)</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#Introduction&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;現今新聞推薦系統中，許多的研究透過加入類神經網路 (Neural) 加強了模型的預測效能，但在變動快速的新聞生態以及用戶偏好容易隨時間改變的特性下，要作出優秀的預測仍是一大挑戰。&lt;/p&gt;
&lt;p&gt;總的來說本作將問題視為三個部分:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 過往的研究往往嘗試以提升 &lt;strong&gt;current reward&lt;/strong&gt; 的預測為目標，卻忽略可能對未來推薦造成的影響。&lt;/li&gt;
&lt;li&gt; 大部分的推薦系統通常僅考慮用戶 &lt;strong&gt;點擊&lt;/strong&gt; 或其他 user feedback 作為模型建模的依據 (label) ，但本作認為應對 User 之於系統的 &lt;strong&gt;滿意程度&lt;/strong&gt; 多做著墨&lt;/li&gt;
&lt;li&gt; 當今推薦系統常有&lt;strong&gt;重複推薦相似新聞內容&lt;/strong&gt;給用戶的問題，舉例來說：在某一時間中的重大新聞被系統大量重複推薦給用戶&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此本作基於上述 3 個議題提出基於 Deep Reinforcement Learning 的模型框架 (DRN) 以對應問題：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 提出 &lt;strong&gt;Deep Q learning&lt;/strong&gt; 以同時考慮 current &amp;amp; future reward 建模&lt;/li&gt;
&lt;li&gt; DRN 除了可考慮 user feedback 外，更進一步去估算 &lt;strong&gt;user activeness&lt;/strong&gt; 造成的影響&lt;/li&gt;
&lt;li&gt; 使用 &lt;strong&gt;Dueling Bandit Gradient Descent&lt;/strong&gt; Algo. 作搜索 (Exploration) 以避免推薦重覆相似的新聞，且避免推薦 Unrelated 的新聞&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Recommendation System" scheme="http://example.com/categories/Recommendation-System/"/>
    
    <category term="Note" scheme="http://example.com/categories/Recommendation-System/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>[心得] 投資最重要的事 | The Most Important Thing Illuminated (Howerd Marks)</title>
    <link href="http://example.com/2020/11/08/the-most-important-thing-illumunated/"/>
    <id>http://example.com/2020/11/08/the-most-important-thing-illumunated/</id>
    <published>2020-11-07T16:00:00.000Z</published>
    <updated>2021-05-16T12:55:12.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Howerd Marks ， 在碩士畢業後於花旗集團工作，並在 1978 年開始擔任花旗集團副總裁直至 1985 。 1995 年創立橡樹資本(Oaktree Capital)，橡樹資本透過獨特的投資策略管理逾330億美元的資產。其中策略涵蓋私募股本、房地產、亞洲及新興市場股票、日本投資機會、電力基礎設施、不良債務、高息債券、可換股證券及次級債務。<br>本書講述的是作者對<strong>價值投資</strong>的思想理念與智慧，其中強調思考價值與價格的關係，並做出風險控管，才得以在適當的時機獲取報酬。</p><p><strong>Oaktree Memo</strong></p><blockquote><p>如果你能避免損失，收益就會不請自來。<br>未來無法預測，但你可以做好準備。<br>最重要的不是預測，而是週期。</p></blockquote><hr><span id="more"></span><h2 id="學習第二層思考"><a href="#學習第二層思考" class="headerlink" title="學習第二層思考"></a>學習第二層思考</h2><p>首先作者便指出投資的目的，是為了 <strong>勝過大盤</strong><br>欲贏過大盤、想賺的比他人要多，投資人的思考必須與眾不同，必須拉高層次思考。作者稱之為第二層的思考。</p><p>第一層思考簡單膚淺幾乎人人都辦得到，第二層思考則較為深入、迂迴。</p><p>比如 :</p><ul><li>  思考未來標的可能的結果落點</li><li>  自身看法<strong>正確的機率</strong>有多高</li><li>  眾人有何市場共識</li><li>  當下價格反應出的共識心態是樂觀還是悲觀</li></ul><p>想要表現的比一般人好，就必須比市場共識具更深一步的思考。</p><blockquote><p>你不可能做著與他人相同的事，卻期待表現比他們好。<br>不能把與眾不同當作一個目標，而是把它當作一種思考方式。<br>只有當你採取與眾不同的行為，你的表現才有可能異於常人，並且只有在判斷比他人卓越時，才有機會高於平均的表現。</p></blockquote><p>有鑑於此，作者提出了一二維矩陣來概述:</p><table><thead><tr><th></th><th>一般的行為</th><th>與眾不同的行為</th></tr></thead><tbody><tr><td>有利的結果</td><td>與平均表現一樣好的結果</td><td>與平均表現一樣遭的結果</td></tr><tr><td>不利的結果</td><td>高於平均表現的結果</td><td>低於平均表現的結果</td></tr></tbody></table><hr><h2 id="了解效率市場與侷限"><a href="#了解效率市場與侷限" class="headerlink" title="了解效率市場與侷限"></a>了解效率市場與侷限</h2><p>此篇章首先介紹甚麼是<strong>效率市場假說 (Efficient-market hypothesis, EMH)</strong></p><p><a href="https://tinyurl.com/y256d5pw">https://tinyurl.com/y256d5pw</a></p><p>效率市場假設</p><ul><li>  市場中具許多聰明、積極且準備充足的人</li><li>  投資人皆能適時買進、放空(打賭下跌)所有資產</li><li>  因為資產價格錯誤在效率市場並不常見，意味著很難擊敗大盤</li></ul><p>主要的效率市場類型有:</p><ul><li>  廣為人知，眾人追蹤的資產</li><li>  擁有清楚易懂等優點的資產</li><li>  資產類型與組成要素的資訊能普遍公平地傳播</li></ul><p>當數以萬計的投資人以相同資訊檢視、分析時，總要去思考</p><ul><li>  「資產被錯估的機率有多高?」</li><li>  「有誰不知道這件事?」</li></ul><p>因此，前述所提之第二層思考依賴的是<strong>無效率市場</strong>。</p><p>因為人受到貪婪、恐懼、忌妒等等因素驅動，破壞保持客觀的可能。得以讓錯誤趁虛而入，進而造成無效率市場的產生。</p><p>無效率市場意旨：</p><ul><li>  市場價格常常是錯的</li><li>  資訊取得與分析不易</li><li>  參與的投資人有不同的技巧、取得資訊的方式</li></ul><p>基於對效率的尊重，採取行動前應思考以下：</p><ul><li>  為何賣家賣出資產時，願意接受讓你獲得高額報酬的價格?</li><li>  你真的比賣家具有更多資產資訊嗎?</li><li>  若此乃好的交易內容，為什沒有他人搶購?</li></ul><hr><h2 id="準確估計實質價值"><a href="#準確估計實質價值" class="headerlink" title="準確估計實質價值"></a>準確估計實質價值</h2><h3 id="技術分析的問題"><a href="#技術分析的問題" class="headerlink" title="技術分析的問題"></a><a href="#%E6%8A%80%E8%A1%93%E5%88%86%E6%9E%90%E7%9A%84%E5%95%8F%E9%A1%8C" title="技術分析的問題"></a>技術分析的問題</h3><p>根據作者的觀察，當沖交易投資人認為，若能以10元買入一檔股票、11元賣出，下周再以24元買入、25元賣出，這樣的交易就是算是成功。<br>但其在這檔上漲15元的股票中，只賺了2元。</p><h3 id="基本面投資法"><a href="#基本面投資法" class="headerlink" title="基本面投資法"></a><a href="#%E5%9F%BA%E6%9C%AC%E9%9D%A2%E6%8A%95%E8%B3%87%E6%B3%95" title="基本面投資法"></a>基本面投資法</h3><p>價值投資 (Value investing)</p><ul><li>找出證券目前的實際價值，並於價格低於價值時買進。<br>  <a href="https://tinyurl.com/y6l8fxdp">https://tinyurl.com/y6l8fxdp</a></li></ul><p>成長投資 (Growth Investing)</p><ul><li>  找出未來價值會快速成長的股票。</li></ul><p>作者指出唯透過正確的估計價值，才能成功獲利</p><blockquote><p>許多人會在上漲時更愛買進標的，因認為市場證實了其決策；而在下跌時，較不喜歡買進標的，因開始懷疑當初買進的決定。這讓投資人很難在標的下跌時加碼(向下攤平)。<br><strong>若你在60元時喜歡這檔股票，那當他下探50、40應該要更喜歡才是。</strong></p></blockquote><blockquote><p>正確的估計實質價值是最根本的基礎<br>就算市場否定，也要勇於堅持</p></blockquote><hr><h2 id="Referece"><a href="#Referece" class="headerlink" title="Referece"></a>Referece</h2><ul><li><a href="https://www.zhihu.com/question/47919586">https://www.zhihu.com/question/47919586</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;Howerd Marks ， 在碩士畢業後於花旗集團工作，並在 1978 年開始擔任花旗集團副總裁直至 1985 。 1995 年創立橡樹資本(Oaktree Capital)，橡樹資本透過獨特的投資策略管理逾330億美元的資產。其中策略涵蓋私募股本、房地產、亞洲及新興市場股票、日本投資機會、電力基礎設施、不良債務、高息債券、可換股證券及次級債務。&lt;br&gt;本書講述的是作者對&lt;strong&gt;價值投資&lt;/strong&gt;的思想理念與智慧，其中強調思考價值與價格的關係，並做出風險控管，才得以在適當的時機獲取報酬。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Oaktree Memo&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你能避免損失，收益就會不請自來。&lt;br&gt;未來無法預測，但你可以做好準備。&lt;br&gt;最重要的不是預測，而是週期。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="書海漫遊" scheme="http://example.com/categories/%E6%9B%B8%E6%B5%B7%E6%BC%AB%E9%81%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>[Note][Pandas] .unique, .isna, .any, .get_dummies, .Serise</title>
    <link href="http://example.com/2020/10/29/pandas-note-001/"/>
    <id>http://example.com/2020/10/29/pandas-note-001/</id>
    <published>2020-10-28T16:00:00.000Z</published>
    <updated>2021-05-16T10:36:10.880Z</updated>
    
    <content type="html"><![CDATA[<p>簡單的紀錄一下近期複習 pandas 用到的 method 筆記，<br>舉例來說，今天有個 credit record 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">record.info()</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">RangeIndex</span>:</span> <span class="number">1048575</span> entries, <span class="number">0</span> to <span class="number">1048574</span></span><br><span class="line">Data columns (total <span class="number">3</span> columns):</span><br><span class="line"> <span class="comment">#   Column          Non-Null Count    Dtype </span></span><br><span class="line">---  ------          --------------    ----- </span><br><span class="line"> <span class="number">0</span>   ID              <span class="number">1048575</span> non-null  int64 </span><br><span class="line"> <span class="number">1</span>   MONTHS_BALANCE  <span class="number">1048575</span> non-null  int64 </span><br><span class="line"> <span class="number">2</span>   STATUS          <span class="number">1048575</span> non-null  <span class="built_in">object</span></span><br><span class="line">dtypes: int64(<span class="number">2</span>), <span class="built_in">object</span>(<span class="number">1</span>)</span><br><span class="line">memory usage: <span class="number">24.0</span>+ MB</span><br></pre></td></tr></table></figure><h1 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h1><h2 id="unique"><a href="#unique" class="headerlink" title=".unique"></a>.unique</h2><p>透過 <code>.unique()</code> 得到 Series 中的唯一值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">record[<span class="string">&#x27;STATUS&#x27;</span>].unique()</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">array([<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>], dtype=<span class="built_in">object</span>)</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="isna"><a href="#isna" class="headerlink" title=".isna"></a>.isna</h2><p><code>.isna()</code> 找出漏失欄位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">record.isna()   <span class="comment"># 列出所有 row</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">IDMONTHS_BALANCESTATUS</span><br><span class="line"><span class="number">0</span><span class="literal">False</span><span class="literal">False</span><span class="literal">False</span></span><br><span class="line"><span class="number">1</span><span class="literal">False</span><span class="literal">False</span><span class="literal">False</span></span><br><span class="line">............</span><br><span class="line">............</span><br><span class="line"><span class="number">1048574</span><span class="literal">False</span><span class="literal">False</span><span class="literal">False</span></span><br><span class="line"><span class="number">1048575</span> rows × <span class="number">3</span> columns</span><br></pre></td></tr></table></figure><h2 id="any"><a href="#any" class="headerlink" title=".any"></a>.any</h2><p><code>.any()</code> 找出任何是空的 columns</p><ul><li>axis : {0 or ‘index’, 1 or ‘columns’, None}, default 0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">record.isna().<span class="built_in">any</span>()</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">ID                <span class="literal">False</span></span><br><span class="line">MONTHS_BALANCE    <span class="literal">False</span></span><br><span class="line">STATUS            <span class="literal">False</span></span><br><span class="line">dtype: <span class="built_in">bool</span></span><br></pre></td></tr></table></figure><h2 id="Series"><a href="#Series" class="headerlink" title=".Series"></a>.Series</h2><p>舉例來說，今天有個日期紀錄如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;date&#x27;</span>:[<span class="string">&#x27;2020-01-12&#x27;</span>, <span class="string">&#x27;2020-01-22&#x27;</span>, <span class="string">&#x27;2020-01-31&#x27;</span>], <span class="string">&#x27;col&#x27;</span>:[<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]&#125;</span><br><span class="line">date = pd.DataFrame(</span><br><span class="line">    data=d</span><br><span class="line">)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">        datecol</span><br><span class="line"><span class="number">0</span><span class="number">2020</span>-01-<span class="number">12</span><span class="number">2</span></span><br><span class="line"><span class="number">1</span><span class="number">2020</span>-01-<span class="number">22</span><span class="number">3</span></span><br><span class="line"><span class="number">2</span><span class="number">2020</span>-01-<span class="number">31</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>.Series.str.split</code> 可以對 Series 字串分割，並返還指定序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apply function 遊歷每一行數據</span></span><br><span class="line">date[<span class="string">&#x27;day&#x27;</span>] = date[<span class="string">&#x27;date&#x27;</span>].apply(</span><br><span class="line">    <span class="keyword">lambda</span> x:<span class="built_in">int</span>(x.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">2</span>])</span><br><span class="line">    )   </span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">        datecolday</span><br><span class="line"><span class="number">0</span><span class="number">2020</span>-01-<span class="number">12</span><span class="number">2</span><span class="number">12</span></span><br><span class="line"><span class="number">1</span><span class="number">2020</span>-01-<span class="number">22</span><span class="number">3</span><span class="number">22</span></span><br><span class="line"><span class="number">2</span><span class="number">2020</span>-01-<span class="number">31</span><span class="number">1</span><span class="number">31</span></span><br></pre></td></tr></table></figure><h1 id="One-hot-encoding"><a href="#One-hot-encoding" class="headerlink" title="One-hot encoding"></a>One-hot encoding</h1><p>將 STATUS 做 one-hot 編碼</p><p>為什麼要做 one-hot:</p><ul><li>離散特徵之間沒有大小關係意義，比如此資料中的 STATUS 代表某一種 情況，或例如某種產品之顏色特徵。</li></ul><h2 id="get-dummies"><a href="#get-dummies" class="headerlink" title=".get_dummies"></a>.get_dummies</h2><p>.get_dummies() 可以對離散特徵進行 one-hot 編碼，以下術為例可得狀態 0~5, C, X 的 one-hot 編碼。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pd.get_dummies(</span><br><span class="line">    record[<span class="string">&#x27;STATUS&#x27;</span>],</span><br><span class="line">    prefix = <span class="string">&#x27;sta&#x27;</span></span><br><span class="line">).head(n=<span class="number">10</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">sta_0sta_1sta_2sta_3sta_4sta_5sta_Csta_X</span><br><span class="line"><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span></span><br><span class="line"><span class="number">1</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">2</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">3</span><span class="number">1</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span></span><br><span class="line"><span class="number">4</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span><span class="number">0</span></span><br><span class="line"><span class="number">5</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span><span class="number">0</span></span><br><span class="line"><span class="number">6</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span><span class="number">0</span></span><br><span class="line"><span class="number">7</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span><span class="number">0</span></span><br><span class="line"><span class="number">8</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span><span class="number">0</span></span><br><span class="line"><span class="number">9</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">0</span><span class="number">1</span><span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h1><ul><li><a href="https://pandas.pydata.org/pandas-docs/stable/">https://pandas.pydata.org/pandas-docs/stable/</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;簡單的紀錄一下近期複習 pandas 用到的 method 筆記，&lt;br&gt;舉例來說，今天有個 credit record 如下：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;record.info()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &amp;#x27;&lt;span class=&quot;title&quot;&gt;pandas&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;core&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;frame&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;DataFrame&lt;/span&gt;&amp;#x27;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;title&quot;&gt;RangeIndex&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1048575&lt;/span&gt; entries, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; to &lt;span class=&quot;number&quot;&gt;1048574&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Data columns (total &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; columns):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;#   Column          Non-Null Count    Dtype &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---  ------          --------------    ----- &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;   ID              &lt;span class=&quot;number&quot;&gt;1048575&lt;/span&gt; non-null  int64 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;   MONTHS_BALANCE  &lt;span class=&quot;number&quot;&gt;1048575&lt;/span&gt; non-null  int64 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;   STATUS          &lt;span class=&quot;number&quot;&gt;1048575&lt;/span&gt; non-null  &lt;span class=&quot;built_in&quot;&gt;object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dtypes: int64(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), &lt;span class=&quot;built_in&quot;&gt;object&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;memory usage: &lt;span class=&quot;number&quot;&gt;24.0&lt;/span&gt;+ MB&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Method&quot;&gt;&lt;a href=&quot;#Method&quot; class=&quot;headerlink&quot; title=&quot;Method&quot;&gt;&lt;/a&gt;Method&lt;/h1&gt;&lt;h2 id=&quot;unique&quot;&gt;&lt;a href=&quot;#unique&quot; class=&quot;headerlink&quot; title=&quot;.unique&quot;&gt;&lt;/a&gt;.unique&lt;/h2&gt;&lt;p&gt;透過 &lt;code&gt;.unique()&lt;/code&gt; 得到 Series 中的唯一值&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;record[&lt;span class=&quot;string&quot;&gt;&amp;#x27;STATUS&amp;#x27;&lt;/span&gt;].unique()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array([&lt;span class=&quot;string&quot;&gt;&amp;#x27;X&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;C&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;3&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;4&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;5&amp;#x27;&lt;/span&gt;], dtype=&lt;span class=&quot;built_in&quot;&gt;object&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    <category term="Note" scheme="http://example.com/categories/Python/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>[Note] 我生命中的一段歷險 | The Ride of A Lifetime (Robert Iger)</title>
    <link href="http://example.com/2020/10/24/the-ride-of-a-lifetime/"/>
    <id>http://example.com/2020/10/24/the-ride-of-a-lifetime/</id>
    <published>2020-10-23T16:00:00.000Z</published>
    <updated>2021-05-16T10:36:07.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>本書是迪士尼執行長 Robert Iger 所著，書中介紹 Iger 從 ABC 新聞員工到接任 ABC 新聞執行長，接著歷經被迪士尼收購後，一直到擔任迪士尼執行長的心路歷程。<br>其中最令我印象深刻的是 Iger 對創作的要求與包容，工作之餘時刻提點自己家人的重要，以及其與 Jobs 的金治情誼 - 兩人互動可以看到不同專業領域執行長的思維。</p><hr><p>其中整理幾個自己較喜歡的段落出來以銘記：</p><blockquote><p>當你有職責在身，眾人希望你扭轉乾坤時，缺乏經驗不能成為失敗的藉口。 此時你必須謙遜，切勿不懂裝懂。 位於領導地位時，也不能令謙遜阻礙你的領導。 真正的權威和領導力自於知道自己是誰，而非裝模作樣。</p></blockquote><blockquote><p>管理創意的流程必須瞭解這並非一門科學，一切都是主觀的。 多數創作者當能力遭到質疑時，都會很敏感。 因此當我被要求提出見解與批評時，我會十分留心創作者投入的心血，對他們來說承擔多少風險。 因此，負責管理創意作品財務與評估的人在行駛職權時，務必小心避免傷害創意發揮，導致反效果。</p></blockquote><blockquote><p>我發現許多人會專注於細節枝末，以掩飾自己缺乏明確、連貫的宏觀想法。 如果你從瑣碎的事情著手，你的格局就大不了。 若大局是一團糟，那麼細小的事情也無關緊要，你不該花時間專注在這些事上。</p></blockquote><span id="more"></span><blockquote><p>失敗不是因為你不夠努力，而是因為失敗在所難免。 如果你想要創新，你需要允許自己失敗。</p></blockquote><blockquote><p>當你發現自己希望某件事成功，卻對於如何辦到無法提出令自己信服的解釋，這時應該要有所警覺，先釐清一些問題： 我需要解決的問題是甚麼? 這個解決方案合理嗎? 如果我有疑慮，為什麼? 我這樣做是有充分的理由，或者事情感因素所至?</p></blockquote><blockquote><p>如果你是老闆，你想要栽培的不是一昧要求升職、抱怨自己大材小用的人，而是日復一日證明自己無可取代的人。</p></blockquote><blockquote><p>人們容易陷入謠言的圈套，擔心某些人對你的想法或講述你的事。 當你覺得不公平受誤解時，很容易變得防禦心強且小心眼。 我不能讓對我認識不多的人表達的負面態度影響我對自己的看法。</p></blockquote><blockquote><p>跟著我的家人在一起，讓我明白所有的壓力僅僅是一份工作，我告誡自己要牢記這一點。</p></blockquote><blockquote><p>自尊受到打擊在現實中時常發生，如何不讓這事在你心中佔據太大位置並耗費太多精力，非常重要。</p></blockquote><blockquote><p>不要讓你的自尊妨礙做出最佳決策的可能。</p></blockquote><blockquote><p>你若能以尊重和同情來對待和與人交往，看似不可能的事情就可能實現 (收購案) 。</p></blockquote><blockquote><p>人們有時會迴避進行重大的嘗試，因為他們會評估有多少勝算，甚至在他們邁出第一步前，就先提出反對這項嘗試的理由。 我一直有一種直覺，並在為魯恩與麥可這樣的人工作後有極大的強化，就是這些勝算不大的事情往往沒有想像中的困難。</p></blockquote><blockquote><p>Steve 非常擅長仔細評估一個問題的各個面向，且不允許負面觀點淹沒正面觀點，特別是他想完成的事情上。</p></blockquote><blockquote><p>榮譽不屬於批評者，不屬於指出勇者如何跌倒，或指出別人哪裡應該做得更好的人，榮耀屬於那些在競技場中沾滿塵土和血汗的人。 (老羅斯福)</p></blockquote><blockquote><p>當你開始相信一切理所當然，在鏡子裡赫然發現投上印刻頭銜的那一刻，你已經走岔了。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;本書是迪士尼執行長 Robert Iger 所著，書中介紹 Iger 從 ABC 新聞員工到接任 ABC 新聞執行長，接著歷經被迪士尼收購後，一直到擔任迪士尼執行長的心路歷程。&lt;br&gt;其中最令我印象深刻的是 Iger 對創作的要求與包容，工作之餘時刻提點自己家人的重要，以及其與 Jobs 的金治情誼 - 兩人互動可以看到不同專業領域執行長的思維。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;其中整理幾個自己較喜歡的段落出來以銘記：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;當你有職責在身，眾人希望你扭轉乾坤時，缺乏經驗不能成為失敗的藉口。 此時你必須謙遜，切勿不懂裝懂。 位於領導地位時，也不能令謙遜阻礙你的領導。 真正的權威和領導力自於知道自己是誰，而非裝模作樣。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;管理創意的流程必須瞭解這並非一門科學，一切都是主觀的。 多數創作者當能力遭到質疑時，都會很敏感。 因此當我被要求提出見解與批評時，我會十分留心創作者投入的心血，對他們來說承擔多少風險。 因此，負責管理創意作品財務與評估的人在行駛職權時，務必小心避免傷害創意發揮，導致反效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;我發現許多人會專注於細節枝末，以掩飾自己缺乏明確、連貫的宏觀想法。 如果你從瑣碎的事情著手，你的格局就大不了。 若大局是一團糟，那麼細小的事情也無關緊要，你不該花時間專注在這些事上。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="書海漫遊" scheme="http://example.com/categories/%E6%9B%B8%E6%B5%B7%E6%BC%AB%E9%81%8A/"/>
    
    
  </entry>
  
  <entry>
    <title>Trie</title>
    <link href="http://example.com/2020/10/05/Trie/"/>
    <id>http://example.com/2020/10/05/Trie/</id>
    <published>2020-10-04T16:00:00.000Z</published>
    <updated>2021-05-16T10:20:07.998Z</updated>
    
    <content type="html"><![CDATA[<p><em>Trie ，又可稱為字典樹、前綴樹 (Prefix Tree)</em></p><h2 id="Trie-結構特性"><a href="#Trie-結構特性" class="headerlink" title="Trie 結構特性"></a>Trie 結構特性</h2><ul><li>  hash tree 的變種，常用在搜尋系統中</li><li>  空間換取時間，利用字串的共同前綴詞 (commen prefix) 作為儲存依據，以字母作為結點，降低查詢時間的開銷以達到提高效率之目的。</li><li>  樹的高度為最長字串長 + 1</li><li>  時間複雜度為 O(m), m 為欲插入/搜尋的字串長度</li></ul><p><img src="https://i.imgur.com/pQpPR0x.png" alt="trie"></p><span id="more"></span><p>優點 ：</p><ul><li>  大幅減少無謂的字串比對，查詢效率比 hash map 高</li><li>  容易撰寫</li><li>  查詢是否存在 &amp; 前綴相關具有非常好的效果</li></ul><p>缺點：</p><ul><li>  十分消耗記憶體空間，因為需要存取與前綴相關的指標，因此大部分使用情況會占用大量空指標</li></ul><h2 id="Hash-vs-Trie"><a href="#Hash-vs-Trie" class="headerlink" title="Hash vs Trie"></a>Hash vs Trie</h2><table><thead><tr><th>Compare</th><th>Hash</th><th>Trie</th></tr></thead><tbody><tr><td>時間複雜度</td><td>O(1)~O(n)</td><td>O(n)</td></tr><tr><td>空間複雜度</td><td>優</td><td>劣</td></tr><tr><td>性質</td><td>只能找尋完整字符</td><td>除完整字符，也可找尋StarWith 前綴字符</td></tr></tbody></table><p>若使 Hash 得以搜尋每個前綴字符，空間複雜度將比 Trie 來得低 (Trie還必須存取前綴相連的指標)。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://stackoverflow.com/questions/245878/how-do-i-choose-between-a-hash-table-and-a-trie-prefix-tree">https://stackoverflow.com/questions/245878/how-do-i-choose-between-a-hash-table-and-a-trie-prefix-tree</a></p><p><a href="http://pisces.ck.tp.edu.tw/~peng/index.php?action=showfile&file=f743c2923f8170798f62a585257fdd8436cd73b6d">http://pisces.ck.tp.edu.tw/~peng/index.php?action=showfile&amp;file=f743c2923f8170798f62a585257fdd8436cd73b6d</a></p><p><a href="https://medium.com/@derekfan/%E4%B9%9D%E7%AB%A0%E7%AE%97%E6%B3%95-template-trie-tree-%E5%AD%97%E5%85%B8%E6%A8%B9-132e19c6c827">https://medium.com/@derekfan/九章算法-template-trie-tree-字典樹-132e19c6c827</a></p><p><a href="https://zhu45.org/posts/2018/Jun/02/trie/">https://zhu45.org/posts/2018/Jun/02/trie/</a></p><p><a href="http://pisces.ck.tp.edu.tw/~peng/index.php?action=showfile&file=f743c2923f8170798f62a585257fdd8436cd73b6d">http://pisces.ck.tp.edu.tw/~peng/index.php?action=showfile&amp;file=f743c2923f8170798f62a585257fdd8436cd73b6d</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;Trie ，又可稱為字典樹、前綴樹 (Prefix Tree)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;Trie-結構特性&quot;&gt;&lt;a href=&quot;#Trie-結構特性&quot; class=&quot;headerlink&quot; title=&quot;Trie 結構特性&quot;&gt;&lt;/a&gt;Trie 結構特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;  hash tree 的變種，常用在搜尋系統中&lt;/li&gt;
&lt;li&gt;  空間換取時間，利用字串的共同前綴詞 (commen prefix) 作為儲存依據，以字母作為結點，降低查詢時間的開銷以達到提高效率之目的。&lt;/li&gt;
&lt;li&gt;  樹的高度為最長字串長 + 1&lt;/li&gt;
&lt;li&gt;  時間複雜度為 O(m), m 為欲插入/搜尋的字串長度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/pQpPR0x.png&quot; alt=&quot;trie&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Data Structure" scheme="http://example.com/categories/Data-Structure/"/>
    
    
  </entry>
  
  <entry>
    <title>[ML] Ensemble - Boosting, Stacking</title>
    <link href="http://example.com/2020/09/28/ml-ensemble/"/>
    <id>http://example.com/2020/09/28/ml-ensemble/</id>
    <published>2020-09-27T16:00:00.000Z</published>
    <updated>2021-05-16T09:14:14.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Boosting-梯度提升"><a href="#Boosting-梯度提升" class="headerlink" title="Boosting (梯度提升)"></a>Boosting (梯度提升)</h2><p>相較對於 bagging 是以多個強分類器 (Strong Classifier) 組合不同，boosting 方法是藉由多個弱分類器 (Weak Classifier) 組合成為一個強分類器。</p><p>其中弱分類器的 error rate 需要略低於 50%，透過 ensemble 來使分類準確度逐步趨近於1。</p><p>其中訓練 boosting clf. 的方法是</p><ul><li>  建構第一個分類器 $f_{1}(x)$</li><li>建構第二個分類器 $f_{2}(x)$ 以幫助 $f_{1}(x)$ 預測分類<ul><li>  若 $f_{2}(x)$ 相似於 $f_{1}(x)$ 會沒有效果</li></ul></li><li>  建構第 N 個分類器 …</li><li>  因此 boosting clf. 是具時序性的。</li></ul><p>其中， boosting 的模型特性能夠有效<strong>降低 bias</strong>。</p><h3 id="AdaBoost"><a href="#AdaBoost" class="headerlink" title="AdaBoost"></a><a href="#AdaBoost" title="AdaBoost"></a>AdaBoost</h3><h4 id="如何建構不同的-Classifier"><a href="#如何建構不同的-Classifier" class="headerlink" title="如何建構不同的 Classifier"></a><a href="#%E5%A6%82%E4%BD%95%E5%BB%BA%E6%A7%8B%E4%B8%8D%E5%90%8C%E7%9A%84-Classifier" title="如何建構不同的 Classifier"></a>如何建構不同的 Classifier</h4><p>如果在訓練新的的分類器時，使用與舊有分類器相同的 datasets ，錯誤分類的資料還是容易做出錯誤分類，因此 AdaBoost 的作法是透過隊訓練資料做 re-weighting ，使得新的分類器能針對學習錯誤分類的資料以得到更好的效果。</p><span id="more"></span><p><strong>AdaBoost 演算法如下：</strong><br><img src="https://i.imgur.com/udUaER1.jpg" alt="note1"><br><img src="https://i.imgur.com/9UXyGZD.jpg" alt="note2"></p><blockquote><p>由於 boosting 訓練時著重在分類錯誤的資料，因此對於資料的 noise 十分敏感，因此不適用在 noise 多的資料中進行分類。</p></blockquote><p>使用 AdaBoost 弔詭的是當 training error 達到 0 時， testing error 卻仍持續下降。</p><p>$g(x)$ 表示 weak clf. 整合的輸出結果，而 Margin 代表分類器分類正確的情形， 大於 0 代表正確分類，小於 0 則表示錯誤分類。</p><p><img src="https://i.imgur.com/W5AxFrw.jpg" alt="note3"></p><p>其中若使 Margin 愈大，則 penalty 則越小。</p><p><img src="https://i.imgur.com/2LZR2ME.jpg" alt="note4"></p><h3 id="Optimize"><a href="#Optimize" class="headerlink" title="Optimize"></a>Optimize</h3><p>Minimize $L(g) = \sum_n l(\hat{y}^n, g(x^n)) $</p><h3 id="Gradient-Boosting"><a href="#Gradient-Boosting" class="headerlink" title="Gradient Boosting"></a>Gradient Boosting</h3><p>Gradient Descent 的計算如：<br>$y=F−∂L/∂F$</p><p>欲使 $g_{t-1}(x)$<br>之 weak clf. 更新使其欲接近 g(t)，因此可這樣更新：<br>$g_t(x) = g_{t-1}(x)-η ∂L(g)/∂g(x)$</p><blockquote><p>ppt.ensemble.page.36-39</p></blockquote><h2 id="Stacking-Stacked-Generalization"><a href="#Stacking-Stacked-Generalization" class="headerlink" title="Stacking (Stacked Generalization)"></a>Stacking (Stacked Generalization)</h2><p><img src="https://i.imgur.com/XpCX9de.png" alt="stacking"></p><p>一般 ensemble(bagging/boosting) 的 aggregation 方法會使用 (voting/averaging) 來實現。</p><p>Stacking 又稱為 Stacked Generalization，是透過建構 meta-learner，將訓練好 n 個 base-learner 的輸出結果作為輸入，學習各 model 的權重，輸出預測結果。<br>而通常這個 meta-learner 會使用較為簡單的分類模型，如 Logistic regression。</p><blockquote><p>其中 Stacking 可以來實現 Bagging方式， 也可以來實現Boosting方式。</p></blockquote><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li>  <a href="http://speech.ee.ntu.edu.tw/~tlkagk/index.html">http://speech.ee.ntu.edu.tw/~tlkagk/index.html</a></li><li>  <a href="https://www.youtube.com/channel/UC2ggjtuuWvxrHHHiaDH1dlQ">https://www.youtube.com/channel/UC2ggjtuuWvxrHHHiaDH1dlQ</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Boosting-梯度提升&quot;&gt;&lt;a href=&quot;#Boosting-梯度提升&quot; class=&quot;headerlink&quot; title=&quot;Boosting (梯度提升)&quot;&gt;&lt;/a&gt;Boosting (梯度提升)&lt;/h2&gt;&lt;p&gt;相較對於 bagging 是以多個強分類器 (Strong Classifier) 組合不同，boosting 方法是藉由多個弱分類器 (Weak Classifier) 組合成為一個強分類器。&lt;/p&gt;
&lt;p&gt;其中弱分類器的 error rate 需要略低於 50%，透過 ensemble 來使分類準確度逐步趨近於1。&lt;/p&gt;
&lt;p&gt;其中訓練 boosting clf. 的方法是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  建構第一個分類器 $f_{1}(x)$&lt;/li&gt;
&lt;li&gt;建構第二個分類器 $f_{2}(x)$ 以幫助 $f_{1}(x)$ 預測分類&lt;ul&gt;
&lt;li&gt;  若 $f_{2}(x)$ 相似於 $f_{1}(x)$ 會沒有效果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;  建構第 N 個分類器 …&lt;/li&gt;
&lt;li&gt;  因此 boosting clf. 是具時序性的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中， boosting 的模型特性能夠有效&lt;strong&gt;降低 bias&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;AdaBoost&quot;&gt;&lt;a href=&quot;#AdaBoost&quot; class=&quot;headerlink&quot; title=&quot;AdaBoost&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#AdaBoost&quot; title=&quot;AdaBoost&quot;&gt;&lt;/a&gt;AdaBoost&lt;/h3&gt;&lt;h4 id=&quot;如何建構不同的-Classifier&quot;&gt;&lt;a href=&quot;#如何建構不同的-Classifier&quot; class=&quot;headerlink&quot; title=&quot;如何建構不同的 Classifier&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#%E5%A6%82%E4%BD%95%E5%BB%BA%E6%A7%8B%E4%B8%8D%E5%90%8C%E7%9A%84-Classifier&quot; title=&quot;如何建構不同的 Classifier&quot;&gt;&lt;/a&gt;如何建構不同的 Classifier&lt;/h4&gt;&lt;p&gt;如果在訓練新的的分類器時，使用與舊有分類器相同的 datasets ，錯誤分類的資料還是容易做出錯誤分類，因此 AdaBoost 的作法是透過隊訓練資料做 re-weighting ，使得新的分類器能針對學習錯誤分類的資料以得到更好的效果。&lt;/p&gt;</summary>
    
    
    
    <category term="Machine Learning" scheme="http://example.com/categories/Machine-Learning/"/>
    
    <category term="Note" scheme="http://example.com/categories/Machine-Learning/Note/"/>
    
    
    <category term="Machine Learning" scheme="http://example.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Attention Is All You Need (part 1)</title>
    <link href="http://example.com/2020/09/07/transformer-part1/"/>
    <id>http://example.com/2020/09/07/transformer-part1/</id>
    <published>2020-09-06T16:00:00.000Z</published>
    <updated>2021-05-16T09:14:33.832Z</updated>
    
    <content type="html"><![CDATA[<p>這一篇 Paper 在碩士生涯中出現的次數也不下10次了吧，畢竟它在 NLP 領域上扮演的角色實在是太重要，整理之前的論文筆記、心得與參考資料，藉著入伍前 8 個小時再來複習一次 🙆🙆 (應該沒有哪個菜兵會幹這種事吧)。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>本篇作者提出　Transformer， 一種完全基於　self-attention 機制的序列模型架構。</p><p>目前被廣泛運用在閱讀理解、資料摘要等任務中。</p><p>Transformer 與傳統學習語言模型的 RNN 架構 Seq2Seq 模型不同，其透過 Self-Attention 機制計算出輸出的特徵向量表示，<br>相較於 RNN 類模型需要等待上一個狀態的輸出向量進行當前狀態的計算，Transformer 的運算方式透過與序列中所有單位元計算可以有效提升模型運算的效率。</p><h2 id="Query-Key-Value"><a href="#Query-Key-Value" class="headerlink" title="Query / Key / Value"></a>Query / Key / Value</h2><p>在注意力模型中，我們假設輸入模型的序列資料為 ($x_1, x_2, … , x_n$)<br>輸出隱藏狀態向量序列為 ($h_1, h_2, … , h_n$)<br>透過注意力權重(attention weight) 乘以輸入序列資料，接著取加權平均得到情境特徵向量(Context Vector)，最後即可使用 $C_t$ (t 表狀態) 計算考慮注意力權重的輸出句子 ($y_1, y_2, … , y_n$)。</p><span id="more"></span><p>如此我們也可以說是，將每一個輸入序列作為 Query、位址作為 Key，透過計算狀態 Q 與 K 的相似性得到對於元素 Value 的權重係數，接著乘上 V 進行加權求和得到 Context Vector。</p><h2 id="Scaled-Dot-Product-attention"><a href="#Scaled-Dot-Product-attention" class="headerlink" title="Scaled Dot-Product attention"></a>Scaled Dot-Product attention</h2><p><img src="https://i.imgur.com/1tp6pve.png"></p><p>延續上述提到 K, Q, V 的概念， 在Transformer 中使用的 Self-Attention 將其視為同一個輸入，並藉由各自的向量矩陣 $(W_K, W_Q, W_V)$ 投影轉換輸入得到 K, Q, V。</p><p>接著，注意力權重的計算方式則可以表示為以下公式：</p><p>$Attention(Q, K, V) = softmax(QK^T/\sqrt{d_k})V$ (a.)</p><p><img src="https://i.imgur.com/aPyGkpC.jpg"></p><p>其中 $1/\sqrt{d_k}$ 是一個標準化的計算步驟以防止計算結果過大， $d_k$ 則為 K 的向量維度大小。</p><h2 id="Multi-head-attention"><a href="#Multi-head-attention" class="headerlink" title="Multi-head attention"></a>Multi-head attention</h2><p>接著，論文中進一步提出 Multi-head attention 的機制以捕捉在不同向量空間中序列資料所可能包含的訊息。</p><p>實際的操作方法是將 K, Q, V 線性投影到 h 個不同的向量空間，並個別進行 Scaled Dot-Product attention 運算得到 h 個 attention head，最後將 h 個矩陣接合(Concat.) 並藉由 weighting matrix 得到輸出矩陣 $Z$ 。</p><p><img src="https://i.imgur.com/ynSadpc.jpg"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://arxiv.org/abs/1706.03762">Attention Is All You Need</a></p><p><a href="https://allen108108.github.io/blog/2020/05/13/[%E8%AB%96%E6%96%87]%20Attention%20Is%20All%20You%20Need/">[論文] Attention Is All You Need</a></p><p><a href="https://medium.com/@bgg/seq2seq-pay-attention-to-self-attention-part-2-%E4%B8%AD%E6%96%87%E7%89%88-ef2ddf8597a4">Seq2seq pay Attention to Self Attention: Part 2(中文版)</a></p><p><a href="https://zhuanlan.zhihu.com/p/47282410">Attention机制详解（二）——Self-Attention与Transformer</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;這一篇 Paper 在碩士生涯中出現的次數也不下10次了吧，畢竟它在 NLP 領域上扮演的角色實在是太重要，整理之前的論文筆記、心得與參考資料，藉著入伍前 8 個小時再來複習一次 🙆🙆 (應該沒有哪個菜兵會幹這種事吧)。&lt;/p&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;本篇作者提出　Transformer， 一種完全基於　self-attention 機制的序列模型架構。&lt;/p&gt;
&lt;p&gt;目前被廣泛運用在閱讀理解、資料摘要等任務中。&lt;/p&gt;
&lt;p&gt;Transformer 與傳統學習語言模型的 RNN 架構 Seq2Seq 模型不同，其透過 Self-Attention 機制計算出輸出的特徵向量表示，&lt;br&gt;相較於 RNN 類模型需要等待上一個狀態的輸出向量進行當前狀態的計算，Transformer 的運算方式透過與序列中所有單位元計算可以有效提升模型運算的效率。&lt;/p&gt;
&lt;h2 id=&quot;Query-Key-Value&quot;&gt;&lt;a href=&quot;#Query-Key-Value&quot; class=&quot;headerlink&quot; title=&quot;Query / Key / Value&quot;&gt;&lt;/a&gt;Query / Key / Value&lt;/h2&gt;&lt;p&gt;在注意力模型中，我們假設輸入模型的序列資料為 ($x_1, x_2, … , x_n$)&lt;br&gt;輸出隱藏狀態向量序列為 ($h_1, h_2, … , h_n$)&lt;br&gt;透過注意力權重(attention weight) 乘以輸入序列資料，接著取加權平均得到情境特徵向量(Context Vector)，最後即可使用 $C_t$ (t 表狀態) 計算考慮注意力權重的輸出句子 ($y_1, y_2, … , y_n$)。&lt;/p&gt;</summary>
    
    
    
    <category term="Natural Language Processing" scheme="http://example.com/categories/Natural-Language-Processing/"/>
    
    <category term="Note" scheme="http://example.com/categories/Natural-Language-Processing/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>關於當兵 - 入伍前</title>
    <link href="http://example.com/2020/09/06/about-military/"/>
    <id>http://example.com/2020/09/06/about-military/</id>
    <published>2020-09-05T16:00:00.000Z</published>
    <updated>2021-05-16T08:59:59.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="murmur"><a href="#murmur" class="headerlink" title="murmur"></a>murmur</h1><p>當兵的前一個周末，也許是想到入伍後大概好一陣子不能寫code，擔心大腦效能嚴重下降<br>試著把 BERT 中文版的命名實體識別實作完畢 <a href="https://github.com/n60512/BERT-NER-CHINESE">BERT-NER-CHINESE</a>。</p><p>這半個月開啟 <strong>netflix</strong> 會員，並且看完：</p><ul><li>  紙牌屋 第一季</li><li>  紙牌屋 第二季</li><li>  闇 第一季</li><li>  闇 第二季 前五集</li></ul><p>記錄一下一個 netflix 菜雞的心得：</p><h2 id="紙牌屋"><a href="#紙牌屋" class="headerlink" title="紙牌屋"></a>紙牌屋</h2><p>第一季的紙牌屋的男主角 Francis Underwood 實在很對味口，並且也藉由此劇了解一點美國的政治文化。然而劇情在第二季中段就開始有些疲弱，也許是一切劇情發展太過順遂，富豪對手屢屢被壓著打沒有劇情張力，又或許是一再看 Francis 重複一樣的戲碼的不新鮮感導致整體好看程度不級首季棄追。</p><h2 id="闇"><a href="#闇" class="headerlink" title="闇"></a>闇</h2><p>闇則是還不錯的時空穿越劇，但是前期有一點節奏偏慢，若非女友陪著看可能會棄追。但後面慢慢接露線索後就會開始一集一集的接續看。</p><span id="more"></span><h1 id="117t-高雄黃埔陸軍"><a href="#117t-高雄黃埔陸軍" class="headerlink" title="117t 高雄黃埔陸軍"></a>117t 高雄黃埔陸軍</h1><p>後天 20.09.08 是我入伍數饅頭的日子，預計 21.01.03 退伍，其實自己對入伍沒有太多想法，畢竟每個人都是公平的，唯一希望有機會在裡面翻翻書不讓腦袋遲鈍。</p><p>本身住在台中，原本認為很衰的抽到高雄黃埔要跑超遠去當兵，但看ptt版上、網路上、朋友都說高雄黃埔很涼，難道是抽到大獎了嗎 LOL</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;murmur&quot;&gt;&lt;a href=&quot;#murmur&quot; class=&quot;headerlink&quot; title=&quot;murmur&quot;&gt;&lt;/a&gt;murmur&lt;/h1&gt;&lt;p&gt;當兵的前一個周末，也許是想到入伍後大概好一陣子不能寫code，擔心大腦效能嚴重下降&lt;br&gt;試著把 BERT 中文版的命名實體識別實作完畢 &lt;a href=&quot;https://github.com/n60512/BERT-NER-CHINESE&quot;&gt;BERT-NER-CHINESE&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;這半個月開啟 &lt;strong&gt;netflix&lt;/strong&gt; 會員，並且看完：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;  紙牌屋 第一季&lt;/li&gt;
&lt;li&gt;  紙牌屋 第二季&lt;/li&gt;
&lt;li&gt;  闇 第一季&lt;/li&gt;
&lt;li&gt;  闇 第二季 前五集&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;記錄一下一個 netflix 菜雞的心得：&lt;/p&gt;
&lt;h2 id=&quot;紙牌屋&quot;&gt;&lt;a href=&quot;#紙牌屋&quot; class=&quot;headerlink&quot; title=&quot;紙牌屋&quot;&gt;&lt;/a&gt;紙牌屋&lt;/h2&gt;&lt;p&gt;第一季的紙牌屋的男主角 Francis Underwood 實在很對味口，並且也藉由此劇了解一點美國的政治文化。然而劇情在第二季中段就開始有些疲弱，也許是一切劇情發展太過順遂，富豪對手屢屢被壓著打沒有劇情張力，又或許是一再看 Francis 重複一樣的戲碼的不新鮮感導致整體好看程度不級首季棄追。&lt;/p&gt;
&lt;h2 id=&quot;闇&quot;&gt;&lt;a href=&quot;#闇&quot; class=&quot;headerlink&quot; title=&quot;闇&quot;&gt;&lt;/a&gt;闇&lt;/h2&gt;&lt;p&gt;闇則是還不錯的時空穿越劇，但是前期有一點節奏偏慢，若非女友陪著看可能會棄追。但後面慢慢接露線索後就會開始一集一集的接續看。&lt;/p&gt;</summary>
    
    
    
    <category term="Life" scheme="http://example.com/categories/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>使用 BERT-QA 建立自動閱讀理解模型</title>
    <link href="http://example.com/2020/08/27/side-proj-bertqa/"/>
    <id>http://example.com/2020/08/27/side-proj-bertqa/</id>
    <published>2020-08-26T16:00:00.000Z</published>
    <updated>2021-05-16T13:58:13.018Z</updated>
    
    <content type="html"><![CDATA[<p>BERT 架構與訓練可以在 <a href="https://arxiv.org/abs/1810.04805">BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding</a> 中有更詳細的說明。<br><a href="https://github.com/n60512/BERT-QA">n60512/BERT-QA</a> 提供閱讀理解模型的模型微調(fine-tune)功能，使用方法如下：</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>開始微調訓練:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh tarin.sh</span><br></pre></td></tr></table></figure><p>接著修改 interaction.sh 中 load_model_path 的路徑位置:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh interaction.sh  </span><br></pre></td></tr></table></figure><h2 id="The-experimental-result-of-F1-measure："><a href="#The-experimental-result-of-F1-measure：" class="headerlink" title="The experimental result of F1-measure："></a>The experimental result of F1-measure：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Evaluation 100%|███████████████████████████████████| 495/495 \[00:05&lt;00:00, 91.41it/s\]  </span><br><span class="line">Average f1 : 0.5596300989105781</span><br></pre></td></tr></table></figure><h3 id="測試結果"><a href="#測試結果" class="headerlink" title="測試結果"></a><a href="#%E6%B8%AC%E8%A9%A6%E7%B5%90%E6%9E%9C" title="測試結果"></a>測試結果</h3><p><img src="https://i.imgur.com/bxJ0oyV.png" alt="res1"></p><p><img src="https://i.imgur.com/F3mB5jQ.png" alt="res2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;BERT 架構與訓練可以在 &lt;a href=&quot;https://arxiv.org/abs/1810.04805&quot;&gt;BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding</summary>
      
    
    
    
    <category term="Natural Language Processing" scheme="http://example.com/categories/Natural-Language-Processing/"/>
    
    <category term="Project" scheme="http://example.com/categories/Natural-Language-Processing/Project/"/>
    
    
    <category term="Machine Learning" scheme="http://example.com/tags/Machine-Learning/"/>
    
    <category term="Deep Learning" scheme="http://example.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>MetaPred：Meta-Learning for Clinical Risk Prediction with Limited Patient Electronic Health Records</title>
    <link href="http://example.com/2020/07/23/metapred/"/>
    <id>http://example.com/2020/07/23/metapred/</id>
    <published>2020-07-22T16:00:00.000Z</published>
    <updated>2021-05-16T13:58:08.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Meta-Learning"><a href="#Meta-Learning" class="headerlink" title="Meta-Learning"></a>Meta-Learning</h1><hr><p><img src="https://i.imgur.com/6ITXlOm.png" alt="MetaPred"></p><p>目的從多種 source domain (相似種類任務)<br>學習如何 ‘調整參數’ 的策略<br>最終運用在 target domain 中</p><span id="more"></span><p><img src="https://i.imgur.com/z53IyMx.png" alt="Training algorithm"></p><h2 id="Inner-Loop"><a href="#Inner-Loop" class="headerlink" title="Inner-Loop"></a>Inner-Loop</h2><p>Inner-Loop 部份顯示<br>使用多組 source domains 訓練模型 $f$ 參數 $\theta$ (共參)</p><p>分別學習模型參數對各自任務優化參數，並可確保各domain訓練數量相當<br>Domains 同時訓練可能模糊學習目標(平均掉損失函數)</p><h2 id="Outer-Loop"><a href="#Outer-Loop" class="headerlink" title="Outer-Loop"></a>Outer-Loop</h2><p>第11行：與遷移學習所不同之處為，meta-training 藉由同時考慮 target domain 和 source domains 的損失函數優化參數。<br>$uΣ^{K-1}_{i} L_s$  </p><h2 id="相較於-multi-task-learing"><a href="#相較於-multi-task-learing" class="headerlink" title="相較於 multi-task learing"></a>相較於 multi-task learing</h2><p>根據不同種類任務，對目標損失優化參數</p><h2 id="相較於-遷移學習"><a href="#相較於-遷移學習" class="headerlink" title="相較於 遷移學習"></a>相較於 遷移學習</h2><p>遷移學習則是將訓練完成的模型在target domain中進行微調以最佳化。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li>MetaPred: Meta-Learning for Clinical Risk Prediction with Limited Patient Electronic Health Records, KDD’19</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Meta-Learning&quot;&gt;&lt;a href=&quot;#Meta-Learning&quot; class=&quot;headerlink&quot; title=&quot;Meta-Learning&quot;&gt;&lt;/a&gt;Meta-Learning&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/6ITXlOm.png&quot; alt=&quot;MetaPred&quot;&gt;&lt;/p&gt;
&lt;p&gt;目的從多種 source domain (相似種類任務)&lt;br&gt;學習如何 ‘調整參數’ 的策略&lt;br&gt;最終運用在 target domain 中&lt;/p&gt;</summary>
    
    
    
    <category term="Natural Language Processing" scheme="http://example.com/categories/Natural-Language-Processing/"/>
    
    <category term="Note" scheme="http://example.com/categories/Natural-Language-Processing/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>Hierarchical Attention based Neural Network for Explainable Recommendation</title>
    <link href="http://example.com/2019/08/26/HANN/"/>
    <id>http://example.com/2019/08/26/HANN/</id>
    <published>2019-08-25T16:00:00.000Z</published>
    <updated>2021-05-16T13:58:08.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview-of-HANN-model"><a href="#Overview-of-HANN-model" class="headerlink" title="Overview of HANN model"></a>Overview of HANN model</h1><p><img src="https://i.imgur.com/8fGpeaK.png" alt="HANN"></p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Propose two kinds of review attentions, namely, intra-review attention and inter-review attention.</p><ul><li>The first one can reflect the <strong>word difference</strong> in a review</li><li>the latter one can explore the importance of <strong>different reviews</strong> towards a user/item.</li></ul><p>Present a framework of hierarchical neural network named HANN to integrate the two kinds of review attention. The well-designed hierarchical attention mechanism helps the model capture <strong>user profiles</strong> and <strong>item profiles</strong>, making them more explainable and reasonable.</p><span id="more"></span><h2 id="intra-review-word-level"><a href="#intra-review-word-level" class="headerlink" title="intra-review (word-level)"></a>intra-review (word-level)</h2><h3 id="element-wise-product-of-user-item-pair"><a href="#element-wise-product-of-user-item-pair" class="headerlink" title="element-wise product of user-item pair"></a>element-wise product of user-item pair</h3><p>$v_{u,i}$</p><h3 id="compute-weighting-score-for-each-word-in-reviews"><a href="#compute-weighting-score-for-each-word-in-reviews" class="headerlink" title="compute weighting score for each word in reviews"></a>compute weighting score for each word in reviews</h3><p>$a^{*}<em>{j} = W^{T}</em>{a}ReLU(W_h h_j+W_u v_{u,i}+b_1)+b_2$</p><h3 id="compute-attention-score"><a href="#compute-attention-score" class="headerlink" title="compute attention score"></a>compute attention score</h3><p>$a_{j} = exp(a^{<em>}_{j})/Σexp(a^{</em>}_{j})$</p><h3 id="and-then-reflexts-the-importance-of-each-word-for-user-item-pair"><a href="#and-then-reflexts-the-importance-of-each-word-for-user-item-pair" class="headerlink" title="and then , reflexts the importance of each word for user-item pair"></a>and then , reflexts the importance of each word for user-item pair</h3><p>$h=Σ_{j=1,2,…,n} a_j h_j$</p><h2 id="inter-review-review-level"><a href="#inter-review-review-level" class="headerlink" title="inter-review (review-level)"></a>inter-review (review-level)</h2><h3 id="element-wise-product-of-user-item-pair-1"><a href="#element-wise-product-of-user-item-pair-1" class="headerlink" title="element-wise product of user-item pair"></a>element-wise product of user-item pair</h3><p>$v_{u,i}$</p><h3 id="compute-weighting-score-for-each-reviews"><a href="#compute-weighting-score-for-each-reviews" class="headerlink" title="compute weighting score for each reviews"></a>compute weighting score for <strong>each reviews</strong></h3><p>$\beta^{*}<em>{j} = W^{T}</em>{b}ReLU(W_{s}(s_j \otimes p_j) h_j+W_v v_{u,i}+b_3)+b_4$</p><h3 id="compute-attention-score-1"><a href="#compute-attention-score-1" class="headerlink" title="compute attention score"></a>compute attention score</h3><p>$a_j = exp(\beta^{<em>}_{j})/Σexp(\beta^{</em>}_{j})$</p><h3 id="and-then-reflexts-the-importance-of-each-reviews-for-user-item-pair"><a href="#and-then-reflexts-the-importance-of-each-reviews-for-user-item-pair" class="headerlink" title="and then , reflexts the importance of each reviews for user-item pair"></a>and then , reflexts the importance of <strong>each reviews</strong> for user-item pair</h3><p>$s=Σ_{j=1,2,…,n} \beta_j (s_j \otimes p_j)$</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><p><a href="https://dl.acm.org/citation.cfm?id=3326592">Hierarchical Attention based Neural Network for Explainable Recommendation</a> [name=D Cong] [time=2019]</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Overview-of-HANN-model&quot;&gt;&lt;a href=&quot;#Overview-of-HANN-model&quot; class=&quot;headerlink&quot; title=&quot;Overview of HANN model&quot;&gt;&lt;/a&gt;Overview of HANN model&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/8fGpeaK.png&quot; alt=&quot;HANN&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h1&gt;&lt;p&gt;Propose two kinds of review attentions, namely, intra-review attention and inter-review attention.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first one can reflect the &lt;strong&gt;word difference&lt;/strong&gt; in a review&lt;/li&gt;
&lt;li&gt;the latter one can explore the importance of &lt;strong&gt;different reviews&lt;/strong&gt; towards a user/item.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Present a framework of hierarchical neural network named HANN to integrate the two kinds of review attention. The well-designed hierarchical attention mechanism helps the model capture &lt;strong&gt;user profiles&lt;/strong&gt; and &lt;strong&gt;item profiles&lt;/strong&gt;, making them more explainable and reasonable.&lt;/p&gt;</summary>
    
    
    
    <category term="Recommendation System" scheme="http://example.com/categories/Recommendation-System/"/>
    
    <category term="Note" scheme="http://example.com/categories/Recommendation-System/Note/"/>
    
    
  </entry>
  
  <entry>
    <title>Neural Attentional Rating Regression with Review-level Explanations</title>
    <link href="http://example.com/2019/07/30/NARRE/"/>
    <id>http://example.com/2019/07/30/NARRE/</id>
    <published>2019-07-29T16:00:00.000Z</published>
    <updated>2021-05-16T13:58:08.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview-of-NARR-model"><a href="#Overview-of-NARR-model" class="headerlink" title="Overview of NARR model"></a>Overview of NARR model</h1><p><img src="https://i.imgur.com/cEJ6saP.jpg" alt="NARR"></p><ul><li><strong>CNN</strong> Text Processor + <strong>Atttion</strong> base review pooling</li><li>Predicts user ratings to the item.</li><li>Seleting userful reviews automatically (With <strong>attention</strong> network).</li></ul><span id="more"></span><h1 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h1><blockquote><p><a href="http://www.thuir.cn/group/~YQLiu/publications/WWW2018_CC.pdf">Neural Attentional Rating Regression with Review-level Explanations</a> [50] [name=C Chen] [time=2018]<code>DeepCoNN</code></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Overview-of-NARR-model&quot;&gt;&lt;a href=&quot;#Overview-of-NARR-model&quot; class=&quot;headerlink&quot; title=&quot;Overview of NARR model&quot;&gt;&lt;/a&gt;Overview of NARR model&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cEJ6saP.jpg&quot; alt=&quot;NARR&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CNN&lt;/strong&gt; Text Processor + &lt;strong&gt;Atttion&lt;/strong&gt; base review pooling&lt;/li&gt;
&lt;li&gt;Predicts user ratings to the item.&lt;/li&gt;
&lt;li&gt;Seleting userful reviews automatically (With &lt;strong&gt;attention&lt;/strong&gt; network).&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Recommendation System" scheme="http://example.com/categories/Recommendation-System/"/>
    
    <category term="Note" scheme="http://example.com/categories/Recommendation-System/Note/"/>
    
    
  </entry>
  
</feed>
